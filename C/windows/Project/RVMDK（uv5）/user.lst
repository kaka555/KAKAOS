ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"user.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	2
  17              	.LC0:
  18 0000 676F696E 		.ascii	"going to task three\012\000"
  18      6720746F 
  18      20746173 
  18      6B207468 
  18      7265650A 
  19 0015 000000   		.align	2
  20              	.LC1:
  21 0018 69206973 		.ascii	"i is %u,address is %p\012\000"
  21      2025752C 
  21      61646472 
  21      65737320 
  21      69732025 
  22 002f 00       		.align	2
  23              	.LC2:
  24 0030 2E2E2F2E 		.ascii	"../../source/main/user.c\000"
  24      2E2F736F 
  24      75726365 
  24      2F6D6169 
  24      6E2F7573 
  25 0049 000000   		.align	2
  26              	.LC3:
  27 004c 72656C65 		.ascii	"release address\012\000"
  27      61736520 
  27      61646472 
  27      6573730A 
  27      00
  28 005d 000000   		.align	2
  29              	.LC4:
  30 0060 656E640A 		.ascii	"end\012\000"
  30      00
  31              		.text
  32              		.align	1
  33              		.global	three
  34              		.syntax unified
  35              		.thumb
  36              		.thumb_func
  37              		.fpu softvfp
  38              		.type	three, %function
  39              	three:
  40              	.LFB16:
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 2


  41              		.file 1 "../../source/main/user.c"
   1:../../source/main/user.c **** #include "user.h"
   2:../../source/main/user.c **** #include "osinit.h"
   3:../../source/main/user.c **** #include <os_delay.h>
   4:../../source/main/user.c **** 
   5:../../source/main/user.c **** 
   6:../../source/main/user.c **** extern volatile TCB *OSTCBCurPtr;
   7:../../source/main/user.c **** extern volatile TCB *OSTCBHighRdyPtr;
   8:../../source/main/user.c **** 
   9:../../source/main/user.c **** #if 0
  10:../../source/main/user.c **** void three(void *para)
  11:../../source/main/user.c **** {
  12:../../source/main/user.c **** 	ka_printf("go into task three\n");
  13:../../source/main/user.c **** 	ka_printf("get out of task three\n");
  14:../../source/main/user.c **** }
  15:../../source/main/user.c **** void four(void *para)
  16:../../source/main/user.c **** {
  17:../../source/main/user.c **** 	while(1)
  18:../../source/main/user.c **** 	{
  19:../../source/main/user.c **** 		ka_printf("four\n");
  20:../../source/main/user.c **** 		suspend();
  21:../../source/main/user.c **** 	}
  22:../../source/main/user.c **** }
  23:../../source/main/user.c **** 
  24:../../source/main/user.c **** void five(void *para)
  25:../../source/main/user.c **** {
  26:../../source/main/user.c **** int i,j;
  27:../../source/main/user.c **** 	while(1)
  28:../../source/main/user.c **** 	{
  29:../../source/main/user.c **** 			//ka_printf("55\n");
  30:../../source/main/user.c **** 		for(i=0;i<5000;++i)
  31:../../source/main/user.c **** 		{
  32:../../source/main/user.c **** 			for(j=0;j<1000;++j)
  33:../../source/main/user.c **** 			{
  34:../../source/main/user.c **** 				;
  35:../../source/main/user.c **** 			}
  36:../../source/main/user.c **** 		}
  37:../../source/main/user.c **** 	}
  38:../../source/main/user.c **** }
  39:../../source/main/user.c **** 
  40:../../source/main/user.c **** void six(void *para)
  41:../../source/main/user.c **** {
  42:../../source/main/user.c **** int i,j;
  43:../../source/main/user.c **** 	while(1)
  44:../../source/main/user.c **** 	{
  45:../../source/main/user.c **** 			ka_printf("six\n");
  46:../../source/main/user.c **** 		for(i=0;i<5000;++i)
  47:../../source/main/user.c **** 		{
  48:../../source/main/user.c **** 			for(j=0;j<1000;++j)
  49:../../source/main/user.c **** 			{
  50:../../source/main/user.c **** 				;
  51:../../source/main/user.c **** 			}
  52:../../source/main/user.c **** 		}
  53:../../source/main/user.c **** 		
  54:../../source/main/user.c **** 	}
  55:../../source/main/user.c **** }
  56:../../source/main/user.c **** #endif
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 3


  57:../../source/main/user.c **** 
  58:../../source/main/user.c **** #if 0
  59:../../source/main/user.c **** static void ka(void *para)
  60:../../source/main/user.c **** {
  61:../../source/main/user.c **** 	ka_printf("task three timer test\n");
  62:../../source/main/user.c **** }
  63:../../source/main/user.c **** struct timer kaka;
  64:../../source/main/user.c **** void three(void *para)
  65:../../source/main/user.c **** {
  66:../../source/main/user.c **** 	
  67:../../source/main/user.c **** 	if(timer_init(&kaka,TIMER_PERIODIC,"test",ka,NULL,15,10) < 0)
  68:../../source/main/user.c **** 	{
  69:../../source/main/user.c **** 		ka_printf("fatal error\n");
  70:../../source/main/user.c **** 	}
  71:../../source/main/user.c **** 	if(timer_enable(&kaka) < 0)
  72:../../source/main/user.c **** 	{
  73:../../source/main/user.c **** 		ka_printf("fatal error\n");
  74:../../source/main/user.c **** 	}
  75:../../source/main/user.c **** 	suspend();
  76:../../source/main/user.c **** 	while(1)
  77:../../source/main/user.c **** 	{
  78:../../source/main/user.c **** 
  79:../../source/main/user.c **** 	}
  80:../../source/main/user.c **** }
  81:../../source/main/user.c **** void four(void *para)
  82:../../source/main/user.c **** {
  83:../../source/main/user.c **** 	while(1)
  84:../../source/main/user.c **** 	{
  85:../../source/main/user.c **** 		ka_printf("four\n");
  86:../../source/main/user.c **** 		sleep(HZ);
  87:../../source/main/user.c **** 	}
  88:../../source/main/user.c **** }
  89:../../source/main/user.c **** #endif
  90:../../source/main/user.c **** 
  91:../../source/main/user.c **** #if 0 //test timer
  92:../../source/main/user.c **** static void ka(void *para)
  93:../../source/main/user.c **** {
  94:../../source/main/user.c **** 	ka_printf("task three timer test ka\n");
  95:../../source/main/user.c **** }
  96:../../source/main/user.c **** 
  97:../../source/main/user.c **** static void kb(void *para)
  98:../../source/main/user.c **** {
  99:../../source/main/user.c **** 	ka_printf("task three timer test kb\n");
 100:../../source/main/user.c **** }
 101:../../source/main/user.c **** struct timer timer1;
 102:../../source/main/user.c **** struct timer timer0;
 103:../../source/main/user.c **** void three(void *para)
 104:../../source/main/user.c **** {
 105:../../source/main/user.c **** 	timer_init(&timer0, TIMER_ONE_TIME, "T1", ka, 0, 15, 8);
 106:../../source/main/user.c **** 	timer_enable(&timer0);
 107:../../source/main/user.c **** 	suspend();
 108:../../source/main/user.c **** }
 109:../../source/main/user.c **** 
 110:../../source/main/user.c **** void four(void *para)
 111:../../source/main/user.c **** {
 112:../../source/main/user.c **** 	timer_init(&timer1, TIMER_TIME, "T2", kb, 0, 20, 8);
 113:../../source/main/user.c **** 	timer_enable(&timer1);
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 4


 114:../../source/main/user.c **** 	suspend();
 115:../../source/main/user.c **** }
 116:../../source/main/user.c **** 
 117:../../source/main/user.c **** #endif
 118:../../source/main/user.c **** 
 119:../../source/main/user.c **** #if 0
 120:../../source/main/user.c **** void three(void *para)
 121:../../source/main/user.c **** {
 122:../../source/main/user.c **** 	int i = 5;
 123:../../source/main/user.c **** 	int ia = 7;
 124:../../source/main/user.c **** 	double kaka = 6.66;
 125:../../source/main/user.c **** 	shell_insert_variable_INT("i",&i);
 126:../../source/main/user.c **** 	shell_insert_variable_INT("ia",&ia);
 127:../../source/main/user.c **** 	shell_insert_variable_FLOAT("kaka",&kaka);
 128:../../source/main/user.c **** 	ka_printf("address of i is %x\n",&i);
 129:../../source/main/user.c **** 	ka_printf("address of ia is %x\n",&ia);
 130:../../source/main/user.c **** 	ka_printf("address of kaka is %x\n",&kaka);
 131:../../source/main/user.c **** 	ka_printf("i is %d\n",i);
 132:../../source/main/user.c **** 	ka_printf("ia is %d\n",ia);
 133:../../source/main/user.c **** 	ka_printf("kaka is %f\n",kaka);
 134:../../source/main/user.c **** 	INSERT_BREAK_POINT();
 135:../../source/main/user.c **** 	ka_printf("i is %d\n",i);
 136:../../source/main/user.c **** 	ka_printf("ia is %d\n",ia);
 137:../../source/main/user.c **** 	ka_printf("kaka is %f\n",kaka);
 138:../../source/main/user.c **** 	INSERT_BREAK_POINT();
 139:../../source/main/user.c **** 	ka_printf("i is %d\n",i);
 140:../../source/main/user.c **** 	ka_printf("ia is %d\n",ia);
 141:../../source/main/user.c **** 	ka_printf("kaka is %f\n",kaka);
 142:../../source/main/user.c **** 	while(1)
 143:../../source/main/user.c **** 	{
 144:../../source/main/user.c **** 		ka_printf("three\n");	
 145:../../source/main/user.c **** 		sleep(10);	
 146:../../source/main/user.c **** 	}	
 147:../../source/main/user.c **** }
 148:../../source/main/user.c **** #endif
 149:../../source/main/user.c **** 
 150:../../source/main/user.c **** #if 0
 151:../../source/main/user.c **** void six(void *para)
 152:../../source/main/user.c **** {
 153:../../source/main/user.c **** 	
 154:../../source/main/user.c **** }
 155:../../source/main/user.c **** void five(void *para)
 156:../../source/main/user.c **** {
 157:../../source/main/user.c **** 	while(1)
 158:../../source/main/user.c **** 	{
 159:../../source/main/user.c **** 		ka_printf("five\n");	
 160:../../source/main/user.c **** 		sleep(20);	
 161:../../source/main/user.c **** 	}	
 162:../../source/main/user.c **** }
 163:../../source/main/user.c **** void four(void *para)
 164:../../source/main/user.c **** {
 165:../../source/main/user.c **** 	while(1)
 166:../../source/main/user.c **** 	{
 167:../../source/main/user.c **** 		ka_printf("four\n");	
 168:../../source/main/user.c **** 		sleep(30);	
 169:../../source/main/user.c **** 	}	
 170:../../source/main/user.c **** }
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 5


 171:../../source/main/user.c **** void three(void *para)
 172:../../source/main/user.c **** {
 173:../../source/main/user.c **** 		void *ptr[64];
 174:../../source/main/user.c **** int i;
 175:../../source/main/user.c **** 	for(i=0;i<64;++i)
 176:../../source/main/user.c **** 	{
 177:../../source/main/user.c **** 		ptr[i] = KA_MALLOC(sizeof(int));
 178:../../source/main/user.c **** 		ka_printf("%d get ptr address is %x \n",i,(int)ptr[i]);
 179:../../source/main/user.c **** 		ka_printf("value %d is %x\n",i,*(int *)ptr[i]);
 180:../../source/main/user.c **** 		*(int *)ptr[i] = 66;
 181:../../source/main/user.c **** 	}
 182:../../source/main/user.c **** 	
 183:../../source/main/user.c **** 	void *kaka = KA_MALLOC(48);
 184:../../source/main/user.c **** 	ka_printf("ptr--kaka get ptr address is %x \n",(int)kaka);
 185:../../source/main/user.c **** 	
 186:../../source/main/user.c **** 	//sleep(300);
 187:../../source/main/user.c **** 	
 188:../../source/main/user.c **** 	ka_free(kaka);
 189:../../source/main/user.c **** 	ka_printf("free complete\n");
 190:../../source/main/user.c **** 	ka_free(ptr[24]);
 191:../../source/main/user.c **** 	ka_printf("free complete\n");
 192:../../source/main/user.c **** 	
 193:../../source/main/user.c **** 	ka_free(ptr[31]);
 194:../../source/main/user.c **** 	ka_printf("free complete\n");
 195:../../source/main/user.c **** 	ka_free(ptr[7]);
 196:../../source/main/user.c **** 	
 197:../../source/main/user.c **** 	ka_free(ptr[62]);
 198:../../source/main/user.c **** 	
 199:../../source/main/user.c **** 	ka_printf("free complete\n");
 200:../../source/main/user.c **** 	
 201:../../source/main/user.c **** 	kaka = KA_MALLOC(120);
 202:../../source/main/user.c **** 	ka_printf("ptr--kaka get ptr address is %x \n",(int)kaka);
 203:../../source/main/user.c **** 	
 204:../../source/main/user.c **** 	//sleep(300);
 205:../../source/main/user.c **** 	
 206:../../source/main/user.c **** 	ka_free(kaka);
 207:../../source/main/user.c **** 	ka_printf("free kaka complete\n");
 208:../../source/main/user.c **** 	
 209:../../source/main/user.c **** 	while(1)
 210:../../source/main/user.c **** 	{
 211:../../source/main/user.c **** 	}	
 212:../../source/main/user.c **** }
 213:../../source/main/user.c **** #endif
 214:../../source/main/user.c **** 
 215:../../source/main/user.c **** #if 0 // test int sleep(unsigned int)
 216:../../source/main/user.c **** void three(void *para)
 217:../../source/main/user.c **** {
 218:../../source/main/user.c **** 	TCB *TCB_ptr4,*TCB_ptr5;
 219:../../source/main/user.c **** 	if(0 != task_creat_ready(256,5,5,"five",five,NULL,&TCB_ptr5))
 220:../../source/main/user.c **** 	{
 221:../../source/main/user.c **** 		ka_printf("os_init_fail...stop booting...\n");
 222:../../source/main/user.c **** 		while(1);
 223:../../source/main/user.c **** 	}
 224:../../source/main/user.c **** 	if(0 != task_creat_ready(256,5,5,"four",four,NULL,&TCB_ptr4))
 225:../../source/main/user.c **** 	{
 226:../../source/main/user.c **** 		ka_printf("os_init_fail...stop booting...\n");
 227:../../source/main/user.c **** 		while(1);
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 6


 228:../../source/main/user.c **** 	}
 229:../../source/main/user.c **** 	int ret = sleep(30);
 230:../../source/main/user.c **** 	ka_printf("task three ret is %d\n",ret);
 231:../../source/main/user.c **** 	if(0 != remove_from_delay_heap(TCB_ptr5))
 232:../../source/main/user.c **** 	{
 233:../../source/main/user.c **** 		ka_printf("fatal error\n");
 234:../../source/main/user.c **** 	}
 235:../../source/main/user.c **** 	if(0 != remove_from_delay_heap(TCB_ptr4))
 236:../../source/main/user.c **** 	{
 237:../../source/main/user.c **** 		ka_printf("fatal error\n");
 238:../../source/main/user.c **** 	}
 239:../../source/main/user.c **** 	suspend();
 240:../../source/main/user.c **** 	while(1);
 241:../../source/main/user.c **** }
 242:../../source/main/user.c **** 
 243:../../source/main/user.c **** void five(void *para)
 244:../../source/main/user.c **** {
 245:../../source/main/user.c **** 	int ret = sleep(58);
 246:../../source/main/user.c **** 	ka_printf("task five ret is %d\n",ret);
 247:../../source/main/user.c **** 	suspend();
 248:../../source/main/user.c **** 	while(1);
 249:../../source/main/user.c **** }
 250:../../source/main/user.c **** void four(void *para)
 251:../../source/main/user.c **** {
 252:../../source/main/user.c **** 	int ret = sleep(40);
 253:../../source/main/user.c **** 	ka_printf("task four ret is %d\n",ret);
 254:../../source/main/user.c **** 	suspend();
 255:../../source/main/user.c **** 	while(1);
 256:../../source/main/user.c **** }
 257:../../source/main/user.c **** #endif
 258:../../source/main/user.c **** 
 259:../../source/main/user.c **** #if 0 // test message queue
 260:../../source/main/user.c **** MQB MQB_test;
 261:../../source/main/user.c **** 
 262:../../source/main/user.c **** void three(void *para)
 263:../../source/main/user.c **** {
 264:../../source/main/user.c **** 	int i;
 265:../../source/main/user.c **** 	msg_init(&MQB_test,"test",3);
 266:../../source/main/user.c **** 	struct message array[10];
 267:../../source/main/user.c **** 	array[9].tick = 1;
 268:../../source/main/user.c **** //	for(i=0;i<4;++i)
 269:../../source/main/user.c **** //	{
 270:../../source/main/user.c **** //		if(0 != message_init(array+i,4,(void *)i))
 271:../../source/main/user.c **** //		{
 272:../../source/main/user.c **** //			ka_printf("message_init error\n");
 273:../../source/main/user.c **** //		}
 274:../../source/main/user.c **** //	}
 275:../../source/main/user.c **** //	for(i=0;i<3;++i)
 276:../../source/main/user.c **** //	{
 277:../../source/main/user.c **** //		if(0 != msg_send(&MQB_test,array+i,MSG_FLAG_NON_BLOCKING,456))
 278:../../source/main/user.c **** //		{
 279:../../source/main/user.c **** //			ka_printf("msg_send error\n");
 280:../../source/main/user.c **** //		}
 281:../../source/main/user.c **** //	}
 282:../../source/main/user.c **** //	if(0 != msg_send(&MQB_test,array+i,MSG_FLAG_WAIT,20))
 283:../../source/main/user.c **** //	{
 284:../../source/main/user.c **** //		ka_printf("msg_send error\n");
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 7


 285:../../source/main/user.c **** //	}
 286:../../source/main/user.c **** 	ka_printf("complete\n");
 287:../../source/main/user.c **** 	suspend();
 288:../../source/main/user.c **** 	while(1);
 289:../../source/main/user.c **** }
 290:../../source/main/user.c **** 	
 291:../../source/main/user.c **** 
 292:../../source/main/user.c **** void four(void *para)
 293:../../source/main/user.c **** {
 294:../../source/main/user.c **** 	struct message *message_ptr;
 295:../../source/main/user.c **** 	while(1)
 296:../../source/main/user.c **** 	{
 297:../../source/main/user.c **** 		if(0 != msg_receive(&MQB_test,&message_ptr,MSG_FLAG_WAIT,0))
 298:../../source/main/user.c **** 		{
 299:../../source/main/user.c **** 			ka_printf("msg_send error\n");
 300:../../source/main/user.c **** 		}
 301:../../source/main/user.c **** 		else
 302:../../source/main/user.c **** 		{
 303:../../source/main/user.c **** 			ka_printf("task four get a message\n");
 304:../../source/main/user.c **** 			ka_printf("size is %u\n",message_ptr->message_size);
 305:../../source/main/user.c **** 			ka_printf("data is %u\n",(unsigned int)(message_ptr->message_data_ptr));
 306:../../source/main/user.c **** 			ka_printf("tick is %l\n",message_ptr->tick);
 307:../../source/main/user.c **** 			ka_printf("=====================================");
 308:../../source/main/user.c **** 		}
 309:../../source/main/user.c **** 	}
 310:../../source/main/user.c **** }
 311:../../source/main/user.c **** #endif
 312:../../source/main/user.c **** 
 313:../../source/main/user.c **** 
 314:../../source/main/user.c **** #if 0 //test mutex
 315:../../source/main/user.c **** MUTEX kaka;
 316:../../source/main/user.c **** 
 317:../../source/main/user.c **** void three(void *para)
 318:../../source/main/user.c **** {
 319:../../source/main/user.c **** 	sleep(10*HZ);
 320:../../source/main/user.c **** 	mutex_lock(&kaka);
 321:../../source/main/user.c **** 	ka_printf("task three success to lock mutex\n");
 322:../../source/main/user.c **** 	ka_printf("now task three prio is %u\n",OSTCBCurPtr->prio);
 323:../../source/main/user.c **** 	ka_printf("release lock\n");
 324:../../source/main/user.c **** 	int ret = mutex_unlock(&kaka);
 325:../../source/main/user.c **** 	ka_printf("task three unlock ret is %d\n",ret);
 326:../../source/main/user.c **** 	ka_printf("now task three prio is %u\n",OSTCBCurPtr->prio);
 327:../../source/main/user.c **** }
 328:../../source/main/user.c **** 
 329:../../source/main/user.c **** void four(void *para)
 330:../../source/main/user.c **** {
 331:../../source/main/user.c **** 	sleep(5*HZ);
 332:../../source/main/user.c **** 	mutex_lock(&kaka);
 333:../../source/main/user.c **** 	ka_printf("task four success to lock mutex\n");
 334:../../source/main/user.c **** 	ka_printf("now task four prio is %u\n",OSTCBCurPtr->prio);
 335:../../source/main/user.c **** 	ka_printf("release lock\n");
 336:../../source/main/user.c **** 	int ret = mutex_unlock(&kaka);
 337:../../source/main/user.c **** 	ka_printf("task four unlock ret is %d\n",ret);
 338:../../source/main/user.c **** 	ka_printf("now task four prio is %u\n",OSTCBCurPtr->prio);
 339:../../source/main/user.c **** }
 340:../../source/main/user.c **** 
 341:../../source/main/user.c **** void five(void *para)
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 8


 342:../../source/main/user.c **** {
 343:../../source/main/user.c **** 	mutex_init(&kaka);
 344:../../source/main/user.c **** 	int ret = mutex_lock(&kaka);
 345:../../source/main/user.c **** 	if(0 > ret)
 346:../../source/main/user.c **** 	{
 347:../../source/main/user.c **** 		ka_printf("lock fail\n");
 348:../../source/main/user.c **** 	}
 349:../../source/main/user.c **** 	else
 350:../../source/main/user.c **** 	{
 351:../../source/main/user.c **** 		ka_printf("task five success to lock mutex\n");
 352:../../source/main/user.c **** 	}
 353:../../source/main/user.c **** 	sleep(7*HZ);
 354:../../source/main/user.c **** 	ka_printf("now task five prio is %u\n",OSTCBCurPtr->prio);
 355:../../source/main/user.c **** 	sleep(5*HZ);
 356:../../source/main/user.c **** 	ka_printf("now task five prio is %u\n",OSTCBCurPtr->prio);
 357:../../source/main/user.c **** 	ret = mutex_unlock(&kaka);
 358:../../source/main/user.c **** 	ka_printf("task five unlock ret is %d\n",ret);
 359:../../source/main/user.c **** 	ka_printf("now task five prio is %u\n",OSTCBCurPtr->prio);
 360:../../source/main/user.c **** }
 361:../../source/main/user.c **** 
 362:../../source/main/user.c **** #endif
 363:../../source/main/user.c **** #if 0 //test delay_ms
 364:../../source/main/user.c **** #include "bsp_led.h"  
 365:../../source/main/user.c **** void three(void *para)
 366:../../source/main/user.c **** {
 367:../../source/main/user.c **** 	LED_GPIO_Config();
 368:../../source/main/user.c **** 
 369:../../source/main/user.c **** 	LED1_OFF;
 370:../../source/main/user.c **** 	delay_ms(10);
 371:../../source/main/user.c **** 	LED1_ON;
 372:../../source/main/user.c **** 
 373:../../source/main/user.c **** }
 374:../../source/main/user.c **** #endif
 375:../../source/main/user.c **** 
 376:../../source/main/user.c **** #if 0 //test context switch's time
 377:../../source/main/user.c **** #include "bsp_led.h"
 378:../../source/main/user.c **** void three(void *para)
 379:../../source/main/user.c **** {
 380:../../source/main/user.c **** 	LED_GPIO_Config();
 381:../../source/main/user.c **** 	LED1_OFF;
 382:../../source/main/user.c **** 	sleep(100);
 383:../../source/main/user.c **** 	//suspend();
 384:../../source/main/user.c **** 	while(1);
 385:../../source/main/user.c **** }
 386:../../source/main/user.c **** 
 387:../../source/main/user.c **** void four(void *para)
 388:../../source/main/user.c **** {
 389:../../source/main/user.c **** 	LED1_ON;
 390:../../source/main/user.c **** 	while(1);
 391:../../source/main/user.c **** }
 392:../../source/main/user.c **** //void five(void *para)
 393:../../source/main/user.c **** //{
 394:../../source/main/user.c **** //	while(1);
 395:../../source/main/user.c **** //}
 396:../../source/main/user.c **** //void six(void *para)
 397:../../source/main/user.c **** //{
 398:../../source/main/user.c **** //	while(1);
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 9


 399:../../source/main/user.c **** //}
 400:../../source/main/user.c **** #endif
 401:../../source/main/user.c **** 
 402:../../source/main/user.c **** #if 0 //test new memory management
 403:../../source/main/user.c **** 
 404:../../source/main/user.c **** void three(void *para)
 405:../../source/main/user.c **** {
 406:../../source/main/user.c **** 	void *ptr[31];
 407:../../source/main/user.c **** 	int i;
 408:../../source/main/user.c **** 	get_os_buddy_ptr_head();
 409:../../source/main/user.c **** 	ka_printf("%p\n",alloc_power2_page());
 410:../../source/main/user.c **** 	ka_printf("%p\n",alloc_power3_page());
 411:../../source/main/user.c **** 	ka_printf("%p\n",alloc_power4_page());
 412:../../source/main/user.c **** 	ka_printf("%p\n",alloc_power6_page());
 413:../../source/main/user.c **** 	while(1)
 414:../../source/main/user.c **** 	{
 415:../../source/main/user.c **** 		for(i=0;i<31;++i)
 416:../../source/main/user.c **** 		{
 417:../../source/main/user.c **** 			ptr[i] = ka_malloc(500);
 418:../../source/main/user.c **** 			ka_printf("ptr[%d] is %p\n",i,ptr[i]);
 419:../../source/main/user.c **** 		}
 420:../../source/main/user.c **** 		sleep(200 * HZ);
 421:../../source/main/user.c **** 		for(i=0;i<31;++i)
 422:../../source/main/user.c **** 		{
 423:../../source/main/user.c **** 			ka_free(ptr[i]);
 424:../../source/main/user.c **** 		}
 425:../../source/main/user.c **** 		ka_printf("free complete\n");
 426:../../source/main/user.c **** 		sleep(500 * HZ);
 427:../../source/main/user.c **** 	}
 428:../../source/main/user.c **** }
 429:../../source/main/user.c **** 
 430:../../source/main/user.c **** #endif
 431:../../source/main/user.c **** 
 432:../../source/main/user.c **** #if 0 //test delete_MCB()
 433:../../source/main/user.c **** 
 434:../../source/main/user.c **** MCB kaka;
 435:../../source/main/user.c **** 
 436:../../source/main/user.c **** void three(void *para)
 437:../../source/main/user.c **** {
 438:../../source/main/user.c **** 	init_MCB(&kaka,0);
 439:../../source/main/user.c **** 	ka_printf("task three going to p()\n");
 440:../../source/main/user.c **** 	int ret = p(&kaka,MCB_FLAG_WAIT,0);
 441:../../source/main/user.c **** 	ka_printf("task three ret is %d\n",ret);
 442:../../source/main/user.c **** }
 443:../../source/main/user.c **** 
 444:../../source/main/user.c **** void four(void *para)
 445:../../source/main/user.c **** {
 446:../../source/main/user.c **** 	ka_printf("task four going to p()\n");
 447:../../source/main/user.c **** 	int ret = p(&kaka,MCB_FLAG_WAIT,0);
 448:../../source/main/user.c **** 	ka_printf("task four ret is %d\n",ret);
 449:../../source/main/user.c **** }
 450:../../source/main/user.c **** 
 451:../../source/main/user.c **** void five(void *para)
 452:../../source/main/user.c **** {
 453:../../source/main/user.c **** 	ka_printf("task five going to delete_MCB()\n");
 454:../../source/main/user.c **** 	delete_MCB(&kaka);
 455:../../source/main/user.c **** 	ka_printf("delete completed\n");
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 10


 456:../../source/main/user.c **** }
 457:../../source/main/user.c **** 
 458:../../source/main/user.c **** #endif
 459:../../source/main/user.c **** 
 460:../../source/main/user.c **** #if 0 //test msg_del()
 461:../../source/main/user.c **** 
 462:../../source/main/user.c **** MQB kaka;
 463:../../source/main/user.c **** 
 464:../../source/main/user.c **** void three(void *para)
 465:../../source/main/user.c **** {
 466:../../source/main/user.c **** 	struct message *a;
 467:../../source/main/user.c **** 	msg_init(&kaka,"kaka",8);
 468:../../source/main/user.c **** 	ka_printf("task three going to msg_receive()\n");
 469:../../source/main/user.c **** 	int ret = msg_receive(&kaka,&a,MSG_FLAG_WAIT,0);
 470:../../source/main/user.c **** 	ka_printf("task three ret is %d\n",ret);
 471:../../source/main/user.c **** }
 472:../../source/main/user.c **** 
 473:../../source/main/user.c **** void four(void *para)
 474:../../source/main/user.c **** {
 475:../../source/main/user.c **** 	struct message *a;
 476:../../source/main/user.c **** 	ka_printf("task four going to msg_receive()\n");
 477:../../source/main/user.c **** 	int ret = msg_receive(&kaka,&a,MSG_FLAG_WAIT,0);
 478:../../source/main/user.c **** 	ka_printf("task four ret is %d\n",ret);
 479:../../source/main/user.c **** }
 480:../../source/main/user.c **** 
 481:../../source/main/user.c **** void five(void *para)
 482:../../source/main/user.c **** {
 483:../../source/main/user.c **** 	ka_printf("task five going to msg_del()\n");
 484:../../source/main/user.c **** 	msg_del(&kaka);
 485:../../source/main/user.c **** 	ka_printf("delete completed\n");
 486:../../source/main/user.c **** }
 487:../../source/main/user.c **** 
 488:../../source/main/user.c **** #endif
 489:../../source/main/user.c **** 
 490:../../source/main/user.c **** #if 0 //test mutex_del()
 491:../../source/main/user.c **** 
 492:../../source/main/user.c **** MUTEX kaka;
 493:../../source/main/user.c **** 
 494:../../source/main/user.c **** void three(void *para)
 495:../../source/main/user.c **** {
 496:../../source/main/user.c **** 	mutex_init(&kaka);
 497:../../source/main/user.c **** 	sleep(5*HZ);
 498:../../source/main/user.c **** 	ka_printf("task three going to mutex_lock()\n");
 499:../../source/main/user.c **** 	int ret = mutex_lock(&kaka);
 500:../../source/main/user.c **** 	ka_printf("task three ret is %d\n",ret);
 501:../../source/main/user.c **** }
 502:../../source/main/user.c **** 
 503:../../source/main/user.c **** void four(void *para)
 504:../../source/main/user.c **** {
 505:../../source/main/user.c **** 	sleep(5*HZ);
 506:../../source/main/user.c **** 	ka_printf("task four going to mutex_lock()\n");
 507:../../source/main/user.c **** 	int ret = mutex_lock(&kaka);
 508:../../source/main/user.c **** 	ka_printf("task four ret is %d\n",ret);
 509:../../source/main/user.c **** }
 510:../../source/main/user.c **** 
 511:../../source/main/user.c **** void five(void *para)
 512:../../source/main/user.c **** {
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 11


 513:../../source/main/user.c **** 	ka_printf("task five going to mutex_lock()\n");
 514:../../source/main/user.c **** 	mutex_lock(&kaka);
 515:../../source/main/user.c **** 	sleep(10*HZ);
 516:../../source/main/user.c **** 	ka_printf("task five going to mutex_del()\n");
 517:../../source/main/user.c **** 	mutex_del(&kaka);
 518:../../source/main/user.c **** 	ka_printf("delete completed\n");
 519:../../source/main/user.c **** }
 520:../../source/main/user.c **** 
 521:../../source/main/user.c **** #endif
 522:../../source/main/user.c **** 
 523:../../source/main/user.c **** #if 0 //test MCB
 524:../../source/main/user.c **** 
 525:../../source/main/user.c **** MCB kaka;
 526:../../source/main/user.c **** 
 527:../../source/main/user.c **** void three(void *para)
 528:../../source/main/user.c **** {
 529:../../source/main/user.c **** 	init_MCB_binary(&kaka,0);
 530:../../source/main/user.c **** //	ka_printf("task three p()\n");
 531:../../source/main/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 532:../../source/main/user.c **** //	ka_printf("task three p()\n");
 533:../../source/main/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 534:../../source/main/user.c **** //	ka_printf("task three sleep()\n");
 535:../../source/main/user.c **** //	sleep(50);
 536:../../source/main/user.c **** 	ka_printf("task three v()\n");
 537:../../source/main/user.c **** 	v(&kaka);
 538:../../source/main/user.c **** 	ka_printf("task three v()\n");
 539:../../source/main/user.c **** 	v(&kaka);
 540:../../source/main/user.c **** }
 541:../../source/main/user.c **** 
 542:../../source/main/user.c **** void four(void *para)
 543:../../source/main/user.c **** {
 544:../../source/main/user.c **** //	ka_printf("task four p()\n");
 545:../../source/main/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 546:../../source/main/user.c **** 	ka_printf("task four p()\n");
 547:../../source/main/user.c **** 	p(&kaka,MCB_FLAG_WAIT,0);
 548:../../source/main/user.c **** 	ka_printf("task four sleep()\n");
 549:../../source/main/user.c **** 	sleep(50);
 550:../../source/main/user.c **** 	ka_printf("task four v()\n");
 551:../../source/main/user.c **** 	v(&kaka);
 552:../../source/main/user.c **** 	ka_printf("task four v()\n");
 553:../../source/main/user.c **** 	v(&kaka);
 554:../../source/main/user.c **** }
 555:../../source/main/user.c **** 
 556:../../source/main/user.c **** void five(void *para)
 557:../../source/main/user.c **** {
 558:../../source/main/user.c **** //	ka_printf("task five p()\n");
 559:../../source/main/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 560:../../source/main/user.c **** 	ka_printf("task five p()\n");
 561:../../source/main/user.c **** 	p(&kaka,MCB_FLAG_WAIT,0);
 562:../../source/main/user.c **** 	ka_printf("task five sleep()\n");
 563:../../source/main/user.c **** 	sleep(50);
 564:../../source/main/user.c **** 	ka_printf("task five v()\n");
 565:../../source/main/user.c **** 	v(&kaka);
 566:../../source/main/user.c **** 	ka_printf("task five v()\n");
 567:../../source/main/user.c **** 	v(&kaka);
 568:../../source/main/user.c **** }
 569:../../source/main/user.c **** 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 12


 570:../../source/main/user.c **** #endif
 571:../../source/main/user.c **** 
 572:../../source/main/user.c **** #if 1//test malloc
 573:../../source/main/user.c **** void three(void *para)
 574:../../source/main/user.c **** {
  42              		.loc 1 574 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 56
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 7, -8
  50              		.cfi_offset 14, -4
  51 0002 8EB0     		sub	sp, sp, #56
  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 64
  54 0004 00AF     		add	r7, sp, #0
  55              	.LCFI2:
  56              		.cfi_def_cfa_register 7
  57 0006 7860     		str	r0, [r7, #4]
 575:../../source/main/user.c **** 	void *ptr[10];
 576:../../source/main/user.c **** 	unsigned int i;
 577:../../source/main/user.c **** 	ka_printf("going to task three\n");
  58              		.loc 1 577 0
  59 0008 2948     		ldr	r0, .L6
  60 000a FFF7FEFF 		bl	ka_printf
 578:../../source/main/user.c **** 	for(i=0;i<10;++i)
  61              		.loc 1 578 0
  62 000e 0023     		movs	r3, #0
  63 0010 7B63     		str	r3, [r7, #52]
  64 0012 1AE0     		b	.L2
  65              	.L3:
 579:../../source/main/user.c **** 	{
 580:../../source/main/user.c **** 		ptr[i] = ka_malloc(700);
  66              		.loc 1 580 0 discriminator 3
  67 0014 4FF42F70 		mov	r0, #700
  68 0018 FFF7FEFF 		bl	ka_malloc
  69 001c 0246     		mov	r2, r0
  70 001e 7B6B     		ldr	r3, [r7, #52]
  71 0020 9B00     		lsls	r3, r3, #2
  72 0022 07F13801 		add	r1, r7, #56
  73 0026 0B44     		add	r3, r3, r1
  74 0028 43F82C2C 		str	r2, [r3, #-44]
 581:../../source/main/user.c **** 		ka_printf("i is %u,address is %p\n",i,ptr[i]);
  75              		.loc 1 581 0 discriminator 3
  76 002c 7B6B     		ldr	r3, [r7, #52]
  77 002e 9B00     		lsls	r3, r3, #2
  78 0030 07F13802 		add	r2, r7, #56
  79 0034 1344     		add	r3, r3, r2
  80 0036 53F82C3C 		ldr	r3, [r3, #-44]
  81 003a 1A46     		mov	r2, r3
  82 003c 796B     		ldr	r1, [r7, #52]
  83 003e 1D48     		ldr	r0, .L6+4
  84 0040 FFF7FEFF 		bl	ka_printf
 578:../../source/main/user.c **** 	for(i=0;i<10;++i)
  85              		.loc 1 578 0 discriminator 3
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 13


  86 0044 7B6B     		ldr	r3, [r7, #52]
  87 0046 0133     		adds	r3, r3, #1
  88 0048 7B63     		str	r3, [r7, #52]
  89              	.L2:
 578:../../source/main/user.c **** 	for(i=0;i<10;++i)
  90              		.loc 1 578 0 is_stmt 0 discriminator 1
  91 004a 7B6B     		ldr	r3, [r7, #52]
  92 004c 092B     		cmp	r3, #9
  93 004e E1D9     		bls	.L3
 582:../../source/main/user.c **** 	}
 583:../../source/main/user.c **** 	INSERT_BREAK_POINT();
  94              		.loc 1 583 0 is_stmt 1
  95 0050 194A     		ldr	r2, .L6+8
  96 0052 40F24721 		movw	r1, #583
  97 0056 1948     		ldr	r0, .L6+12
  98 0058 FFF7FEFF 		bl	insert_break_point
 584:../../source/main/user.c **** 	ka_printf("release address\n");
  99              		.loc 1 584 0
 100 005c 1848     		ldr	r0, .L6+16
 101 005e FFF7FEFF 		bl	ka_printf
 585:../../source/main/user.c **** 	for(i=0;i<10;++i)
 102              		.loc 1 585 0
 103 0062 0023     		movs	r3, #0
 104 0064 7B63     		str	r3, [r7, #52]
 105 0066 12E0     		b	.L4
 106              	.L5:
 586:../../source/main/user.c **** 	{
 587:../../source/main/user.c **** 		ka_free(ptr[i]);
 107              		.loc 1 587 0 discriminator 3
 108 0068 7B6B     		ldr	r3, [r7, #52]
 109 006a 9B00     		lsls	r3, r3, #2
 110 006c 07F13802 		add	r2, r7, #56
 111 0070 1344     		add	r3, r3, r2
 112 0072 53F82C3C 		ldr	r3, [r3, #-44]
 113 0076 1846     		mov	r0, r3
 114 0078 FFF7FEFF 		bl	ka_free
 588:../../source/main/user.c **** 		INSERT_BREAK_POINT();
 115              		.loc 1 588 0 discriminator 3
 116 007c 0E4A     		ldr	r2, .L6+8
 117 007e 4FF41371 		mov	r1, #588
 118 0082 0E48     		ldr	r0, .L6+12
 119 0084 FFF7FEFF 		bl	insert_break_point
 585:../../source/main/user.c **** 	for(i=0;i<10;++i)
 120              		.loc 1 585 0 discriminator 3
 121 0088 7B6B     		ldr	r3, [r7, #52]
 122 008a 0133     		adds	r3, r3, #1
 123 008c 7B63     		str	r3, [r7, #52]
 124              	.L4:
 585:../../source/main/user.c **** 	for(i=0;i<10;++i)
 125              		.loc 1 585 0 is_stmt 0 discriminator 1
 126 008e 7B6B     		ldr	r3, [r7, #52]
 127 0090 092B     		cmp	r3, #9
 128 0092 E9D9     		bls	.L5
 589:../../source/main/user.c **** 	}
 590:../../source/main/user.c **** 	INSERT_BREAK_POINT();
 129              		.loc 1 590 0 is_stmt 1
 130 0094 084A     		ldr	r2, .L6+8
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 14


 131 0096 40F24E21 		movw	r1, #590
 132 009a 0848     		ldr	r0, .L6+12
 133 009c FFF7FEFF 		bl	insert_break_point
 591:../../source/main/user.c **** 	ka_printf("end\n");
 134              		.loc 1 591 0
 135 00a0 0848     		ldr	r0, .L6+20
 136 00a2 FFF7FEFF 		bl	ka_printf
 592:../../source/main/user.c **** }
 137              		.loc 1 592 0
 138 00a6 00BF     		nop
 139 00a8 3837     		adds	r7, r7, #56
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 8
 142 00aa BD46     		mov	sp, r7
 143              	.LCFI4:
 144              		.cfi_def_cfa_register 13
 145              		@ sp needed
 146 00ac 80BD     		pop	{r7, pc}
 147              	.L7:
 148 00ae 00BF     		.align	2
 149              	.L6:
 150 00b0 00000000 		.word	.LC0
 151 00b4 18000000 		.word	.LC1
 152 00b8 68000000 		.word	__FUNCTION__.4748
 153 00bc 30000000 		.word	.LC2
 154 00c0 4C000000 		.word	.LC3
 155 00c4 60000000 		.word	.LC4
 156              		.cfi_endproc
 157              	.LFE16:
 158              		.size	three, .-three
 159              		.section	.rodata
 160 0065 000000   		.align	2
 161              		.type	__FUNCTION__.4748, %object
 162              		.size	__FUNCTION__.4748, 6
 163              	__FUNCTION__.4748:
 164 0068 74687265 		.ascii	"three\000"
 164      6500
 165              		.text
 166              	.Letext0:
 167              		.file 2 "../../source/include/os_cpu/kakaosstdint.h"
 168              		.file 3 "../../source/include/os_lib/double_linked_list.h"
 169              		.file 4 "../../source/include/os_core/task_state.h"
 170              		.file 5 "../../source/include/os_core/TCB.h"
 171              		.section	.debug_info,"",%progbits
 172              	.Ldebug_info0:
 173 0000 B7020000 		.4byte	0x2b7
 174 0004 0200     		.2byte	0x2
 175 0006 00000000 		.4byte	.Ldebug_abbrev0
 176 000a 04       		.byte	0x4
 177 000b 01       		.uleb128 0x1
 178 000c C3020000 		.4byte	.LASF44
 179 0010 0C       		.byte	0xc
 180 0011 FA010000 		.4byte	.LASF45
 181 0015 D8000000 		.4byte	.LASF46
 182 0019 00000000 		.4byte	.Ltext0
 183 001d C8000000 		.4byte	.Letext0
 184 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 15


 185 0025 02       		.uleb128 0x2
 186 0026 01       		.byte	0x1
 187 0027 06       		.byte	0x6
 188 0028 71010000 		.4byte	.LASF0
 189 002c 02       		.uleb128 0x2
 190 002d 02       		.byte	0x2
 191 002e 05       		.byte	0x5
 192 002f 2E000000 		.4byte	.LASF1
 193 0033 03       		.uleb128 0x3
 194 0034 04       		.byte	0x4
 195 0035 05       		.byte	0x5
 196 0036 696E7400 		.ascii	"int\000"
 197 003a 04       		.uleb128 0x4
 198 003b 33000000 		.4byte	0x33
 199 003f 02       		.uleb128 0x2
 200 0040 08       		.byte	0x8
 201 0041 05       		.byte	0x5
 202 0042 06010000 		.4byte	.LASF2
 203 0046 02       		.uleb128 0x2
 204 0047 01       		.byte	0x1
 205 0048 08       		.byte	0x8
 206 0049 4B010000 		.4byte	.LASF3
 207 004d 02       		.uleb128 0x2
 208 004e 02       		.byte	0x2
 209 004f 07       		.byte	0x7
 210 0050 B6010000 		.4byte	.LASF4
 211 0054 05       		.uleb128 0x5
 212 0055 59000000 		.4byte	.LASF6
 213 0059 02       		.byte	0x2
 214 005a 0C       		.byte	0xc
 215 005b 5F000000 		.4byte	0x5f
 216 005f 02       		.uleb128 0x2
 217 0060 04       		.byte	0x4
 218 0061 07       		.byte	0x7
 219 0062 94010000 		.4byte	.LASF5
 220 0066 05       		.uleb128 0x5
 221 0067 98030000 		.4byte	.LASF7
 222 006b 02       		.byte	0x2
 223 006c 0D       		.byte	0xd
 224 006d 71000000 		.4byte	0x71
 225 0071 02       		.uleb128 0x2
 226 0072 08       		.byte	0x8
 227 0073 07       		.byte	0x7
 228 0074 7D010000 		.4byte	.LASF8
 229 0078 06       		.uleb128 0x6
 230 0079 24000000 		.4byte	.LASF24
 231 007d 08       		.byte	0x8
 232 007e 03       		.byte	0x3
 233 007f 04       		.byte	0x4
 234 0080 A1000000 		.4byte	0xa1
 235 0084 07       		.uleb128 0x7
 236 0085 B0030000 		.4byte	.LASF9
 237 0089 03       		.byte	0x3
 238 008a 05       		.byte	0x5
 239 008b A1000000 		.4byte	0xa1
 240 008f 02       		.byte	0x2
 241 0090 23       		.byte	0x23
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 16


 242 0091 00       		.uleb128 0
 243 0092 07       		.uleb128 0x7
 244 0093 82030000 		.4byte	.LASF10
 245 0097 03       		.byte	0x3
 246 0098 05       		.byte	0x5
 247 0099 A1000000 		.4byte	0xa1
 248 009d 02       		.byte	0x2
 249 009e 23       		.byte	0x23
 250 009f 04       		.uleb128 0x4
 251 00a0 00       		.byte	0
 252 00a1 08       		.uleb128 0x8
 253 00a2 04       		.byte	0x4
 254 00a3 78000000 		.4byte	0x78
 255 00a7 09       		.uleb128 0x9
 256 00a8 6B000000 		.4byte	.LASF47
 257 00ac 07       		.byte	0x7
 258 00ad 01       		.byte	0x1
 259 00ae 46000000 		.4byte	0x46
 260 00b2 04       		.byte	0x4
 261 00b3 04       		.byte	0x4
 262 00b4 F5000000 		.4byte	0xf5
 263 00b8 0A       		.uleb128 0xa
 264 00b9 C9010000 		.4byte	.LASF11
 265 00bd 01       		.byte	0x1
 266 00be 0A       		.uleb128 0xa
 267 00bf 59010000 		.4byte	.LASF12
 268 00c3 02       		.byte	0x2
 269 00c4 0A       		.uleb128 0xa
 270 00c5 0F000000 		.4byte	.LASF13
 271 00c9 03       		.byte	0x3
 272 00ca 0A       		.uleb128 0xa
 273 00cb 5B020000 		.4byte	.LASF14
 274 00cf 04       		.byte	0x4
 275 00d0 0A       		.uleb128 0xa
 276 00d1 A0000000 		.4byte	.LASF15
 277 00d5 05       		.byte	0x5
 278 00d6 0A       		.uleb128 0xa
 279 00d7 38000000 		.4byte	.LASF16
 280 00db 06       		.byte	0x6
 281 00dc 0A       		.uleb128 0xa
 282 00dd B7000000 		.4byte	.LASF17
 283 00e1 07       		.byte	0x7
 284 00e2 0A       		.uleb128 0xa
 285 00e3 76000000 		.4byte	.LASF18
 286 00e7 08       		.byte	0x8
 287 00e8 0A       		.uleb128 0xa
 288 00e9 DA010000 		.4byte	.LASF19
 289 00ed 09       		.byte	0x9
 290 00ee 0A       		.uleb128 0xa
 291 00ef 69030000 		.4byte	.LASF20
 292 00f3 0A       		.byte	0xa
 293 00f4 00       		.byte	0
 294 00f5 05       		.uleb128 0x5
 295 00f6 3B010000 		.4byte	.LASF21
 296 00fa 04       		.byte	0x4
 297 00fb 0F       		.byte	0xf
 298 00fc A7000000 		.4byte	0xa7
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 17


 299 0100 05       		.uleb128 0x5
 300 0101 60000000 		.4byte	.LASF22
 301 0105 05       		.byte	0x5
 302 0106 09       		.byte	0x9
 303 0107 5F000000 		.4byte	0x5f
 304 010b 05       		.uleb128 0x5
 305 010c 00000000 		.4byte	.LASF23
 306 0110 05       		.byte	0x5
 307 0111 0B       		.byte	0xb
 308 0112 5F000000 		.4byte	0x5f
 309 0116 0B       		.uleb128 0xb
 310 0117 04       		.byte	0x4
 311 0118 0C       		.uleb128 0xc
 312 0119 B1020000 		.4byte	.LASF41
 313 011d 05       		.byte	0x5
 314 011e 12       		.byte	0x12
 315 011f 3A000000 		.4byte	0x3a
 316 0123 01       		.byte	0x1
 317 0124 01       		.byte	0x1
 318 0125 06       		.uleb128 0x6
 319 0126 72020000 		.4byte	.LASF25
 320 012a 48       		.byte	0x48
 321 012b 05       		.byte	0x5
 322 012c 2F       		.byte	0x2f
 323 012d F6010000 		.4byte	0x1f6
 324 0131 07       		.uleb128 0x7
 325 0132 A1010000 		.4byte	.LASF26
 326 0136 05       		.byte	0x5
 327 0137 30       		.byte	0x30
 328 0138 F6010000 		.4byte	0x1f6
 329 013c 02       		.byte	0x2
 330 013d 23       		.byte	0x23
 331 013e 00       		.uleb128 0
 332 013f 07       		.uleb128 0x7
 333 0140 8C020000 		.4byte	.LASF27
 334 0144 05       		.byte	0x5
 335 0145 31       		.byte	0x31
 336 0146 5F000000 		.4byte	0x5f
 337 014a 02       		.byte	0x2
 338 014b 23       		.byte	0x23
 339 014c 04       		.uleb128 0x4
 340 014d 07       		.uleb128 0x7
 341 014e 96000000 		.4byte	.LASF28
 342 0152 05       		.byte	0x5
 343 0153 32       		.byte	0x32
 344 0154 F6010000 		.4byte	0x1f6
 345 0158 02       		.byte	0x2
 346 0159 23       		.byte	0x23
 347 015a 08       		.uleb128 0x8
 348 015b 07       		.uleb128 0x7
 349 015c 9F030000 		.4byte	.LASF29
 350 0160 05       		.byte	0x5
 351 0161 33       		.byte	0x33
 352 0162 0B010000 		.4byte	0x10b
 353 0166 02       		.byte	0x2
 354 0167 23       		.byte	0x23
 355 0168 0C       		.uleb128 0xc
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 18


 356 0169 07       		.uleb128 0x7
 357 016a 97020000 		.4byte	.LASF30
 358 016e 05       		.byte	0x5
 359 016f 34       		.byte	0x34
 360 0170 0B010000 		.4byte	0x10b
 361 0174 02       		.byte	0x2
 362 0175 23       		.byte	0x23
 363 0176 10       		.uleb128 0x10
 364 0177 07       		.uleb128 0x7
 365 0178 37020000 		.4byte	.LASF31
 366 017c 05       		.byte	0x5
 367 017d 35       		.byte	0x35
 368 017e F5000000 		.4byte	0xf5
 369 0182 02       		.byte	0x2
 370 0183 23       		.byte	0x23
 371 0184 14       		.uleb128 0x14
 372 0185 07       		.uleb128 0x7
 373 0186 23020000 		.4byte	.LASF32
 374 018a 05       		.byte	0x5
 375 018b 36       		.byte	0x36
 376 018c 33000000 		.4byte	0x33
 377 0190 02       		.byte	0x2
 378 0191 23       		.byte	0x23
 379 0192 18       		.uleb128 0x18
 380 0193 07       		.uleb128 0x7
 381 0194 A7010000 		.4byte	.LASF33
 382 0198 05       		.byte	0x5
 383 0199 37       		.byte	0x37
 384 019a 78000000 		.4byte	0x78
 385 019e 02       		.byte	0x2
 386 019f 23       		.byte	0x23
 387 01a0 1C       		.uleb128 0x1c
 388 01a1 07       		.uleb128 0x7
 389 01a2 A4020000 		.4byte	.LASF34
 390 01a6 05       		.byte	0x5
 391 01a7 38       		.byte	0x38
 392 01a8 78000000 		.4byte	0x78
 393 01ac 02       		.byte	0x2
 394 01ad 23       		.byte	0x23
 395 01ae 24       		.uleb128 0x24
 396 01af 07       		.uleb128 0x7
 397 01b0 46010000 		.4byte	.LASF35
 398 01b4 05       		.byte	0x5
 399 01b5 39       		.byte	0x39
 400 01b6 FC010000 		.4byte	0x1fc
 401 01ba 02       		.byte	0x2
 402 01bb 23       		.byte	0x23
 403 01bc 2C       		.uleb128 0x2c
 404 01bd 07       		.uleb128 0x7
 405 01be 14010000 		.4byte	.LASF36
 406 01c2 05       		.byte	0x5
 407 01c3 3A       		.byte	0x3a
 408 01c4 5F000000 		.4byte	0x5f
 409 01c8 02       		.byte	0x2
 410 01c9 23       		.byte	0x23
 411 01ca 30       		.uleb128 0x30
 412 01cb 07       		.uleb128 0x7
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 19


 413 01cc 42020000 		.4byte	.LASF37
 414 01d0 05       		.byte	0x5
 415 01d1 3B       		.byte	0x3b
 416 01d2 5F000000 		.4byte	0x5f
 417 01d6 02       		.byte	0x2
 418 01d7 23       		.byte	0x23
 419 01d8 34       		.uleb128 0x34
 420 01d9 07       		.uleb128 0x7
 421 01da 65010000 		.4byte	.LASF38
 422 01de 05       		.byte	0x5
 423 01df 3C       		.byte	0x3c
 424 01e0 54000000 		.4byte	0x54
 425 01e4 02       		.byte	0x2
 426 01e5 23       		.byte	0x23
 427 01e6 38       		.uleb128 0x38
 428 01e7 07       		.uleb128 0x7
 429 01e8 87030000 		.4byte	.LASF39
 430 01ec 05       		.byte	0x5
 431 01ed 3D       		.byte	0x3d
 432 01ee 66000000 		.4byte	0x66
 433 01f2 02       		.byte	0x2
 434 01f3 23       		.byte	0x23
 435 01f4 40       		.uleb128 0x40
 436 01f5 00       		.byte	0
 437 01f6 08       		.uleb128 0x8
 438 01f7 04       		.byte	0x4
 439 01f8 00010000 		.4byte	0x100
 440 01fc 08       		.uleb128 0x8
 441 01fd 04       		.byte	0x4
 442 01fe 02020000 		.4byte	0x202
 443 0202 02       		.uleb128 0x2
 444 0203 01       		.byte	0x1
 445 0204 08       		.byte	0x8
 446 0205 D5010000 		.4byte	.LASF40
 447 0209 0D       		.uleb128 0xd
 448 020a 02020000 		.4byte	0x202
 449 020e 0E       		.uleb128 0xe
 450 020f 54434200 		.ascii	"TCB\000"
 451 0213 05       		.byte	0x5
 452 0214 3E       		.byte	0x3e
 453 0215 25010000 		.4byte	0x125
 454 0219 04       		.uleb128 0x4
 455 021a 0E020000 		.4byte	0x20e
 456 021e 0C       		.uleb128 0xc
 457 021f A4030000 		.4byte	.LASF42
 458 0223 01       		.byte	0x1
 459 0224 06       		.byte	0x6
 460 0225 2B020000 		.4byte	0x22b
 461 0229 01       		.byte	0x1
 462 022a 01       		.byte	0x1
 463 022b 08       		.uleb128 0x8
 464 022c 04       		.byte	0x4
 465 022d 19020000 		.4byte	0x219
 466 0231 0C       		.uleb128 0xc
 467 0232 13020000 		.4byte	.LASF43
 468 0236 01       		.byte	0x1
 469 0237 07       		.byte	0x7
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 20


 470 0238 2B020000 		.4byte	0x22b
 471 023c 01       		.byte	0x1
 472 023d 01       		.byte	0x1
 473 023e 0F       		.uleb128 0xf
 474 023f 01       		.byte	0x1
 475 0240 28010000 		.4byte	.LASF48
 476 0244 01       		.byte	0x1
 477 0245 3D02     		.2byte	0x23d
 478 0247 01       		.byte	0x1
 479 0248 00000000 		.4byte	.LFB16
 480 024c C8000000 		.4byte	.LFE16
 481 0250 00000000 		.4byte	.LLST0
 482 0254 01       		.byte	0x1
 483 0255 95020000 		.4byte	0x295
 484 0259 10       		.uleb128 0x10
 485 025a 56020000 		.4byte	.LASF49
 486 025e 01       		.byte	0x1
 487 025f 3D02     		.2byte	0x23d
 488 0261 16010000 		.4byte	0x116
 489 0265 02       		.byte	0x2
 490 0266 91       		.byte	0x91
 491 0267 44       		.sleb128 -60
 492 0268 11       		.uleb128 0x11
 493 0269 70747200 		.ascii	"ptr\000"
 494 026d 01       		.byte	0x1
 495 026e 3F02     		.2byte	0x23f
 496 0270 95020000 		.4byte	0x295
 497 0274 02       		.byte	0x2
 498 0275 91       		.byte	0x91
 499 0276 4C       		.sleb128 -52
 500 0277 11       		.uleb128 0x11
 501 0278 6900     		.ascii	"i\000"
 502 027a 01       		.byte	0x1
 503 027b 4002     		.2byte	0x240
 504 027d 5F000000 		.4byte	0x5f
 505 0281 02       		.byte	0x2
 506 0282 91       		.byte	0x91
 507 0283 74       		.sleb128 -12
 508 0284 12       		.uleb128 0x12
 509 0285 2E010000 		.4byte	.LASF50
 510 0289 B5020000 		.4byte	0x2b5
 511 028d 01       		.byte	0x1
 512 028e 05       		.byte	0x5
 513 028f 03       		.byte	0x3
 514 0290 68000000 		.4byte	__FUNCTION__.4748
 515 0294 00       		.byte	0
 516 0295 13       		.uleb128 0x13
 517 0296 16010000 		.4byte	0x116
 518 029a A5020000 		.4byte	0x2a5
 519 029e 14       		.uleb128 0x14
 520 029f 5F000000 		.4byte	0x5f
 521 02a3 09       		.byte	0x9
 522 02a4 00       		.byte	0
 523 02a5 13       		.uleb128 0x13
 524 02a6 09020000 		.4byte	0x209
 525 02aa B5020000 		.4byte	0x2b5
 526 02ae 14       		.uleb128 0x14
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 21


 527 02af 5F000000 		.4byte	0x5f
 528 02b3 05       		.byte	0x5
 529 02b4 00       		.byte	0
 530 02b5 0D       		.uleb128 0xd
 531 02b6 A5020000 		.4byte	0x2a5
 532 02ba 00       		.byte	0
 533              		.section	.debug_abbrev,"",%progbits
 534              	.Ldebug_abbrev0:
 535 0000 01       		.uleb128 0x1
 536 0001 11       		.uleb128 0x11
 537 0002 01       		.byte	0x1
 538 0003 25       		.uleb128 0x25
 539 0004 0E       		.uleb128 0xe
 540 0005 13       		.uleb128 0x13
 541 0006 0B       		.uleb128 0xb
 542 0007 03       		.uleb128 0x3
 543 0008 0E       		.uleb128 0xe
 544 0009 1B       		.uleb128 0x1b
 545 000a 0E       		.uleb128 0xe
 546 000b 11       		.uleb128 0x11
 547 000c 01       		.uleb128 0x1
 548 000d 12       		.uleb128 0x12
 549 000e 01       		.uleb128 0x1
 550 000f 10       		.uleb128 0x10
 551 0010 06       		.uleb128 0x6
 552 0011 00       		.byte	0
 553 0012 00       		.byte	0
 554 0013 02       		.uleb128 0x2
 555 0014 24       		.uleb128 0x24
 556 0015 00       		.byte	0
 557 0016 0B       		.uleb128 0xb
 558 0017 0B       		.uleb128 0xb
 559 0018 3E       		.uleb128 0x3e
 560 0019 0B       		.uleb128 0xb
 561 001a 03       		.uleb128 0x3
 562 001b 0E       		.uleb128 0xe
 563 001c 00       		.byte	0
 564 001d 00       		.byte	0
 565 001e 03       		.uleb128 0x3
 566 001f 24       		.uleb128 0x24
 567 0020 00       		.byte	0
 568 0021 0B       		.uleb128 0xb
 569 0022 0B       		.uleb128 0xb
 570 0023 3E       		.uleb128 0x3e
 571 0024 0B       		.uleb128 0xb
 572 0025 03       		.uleb128 0x3
 573 0026 08       		.uleb128 0x8
 574 0027 00       		.byte	0
 575 0028 00       		.byte	0
 576 0029 04       		.uleb128 0x4
 577 002a 35       		.uleb128 0x35
 578 002b 00       		.byte	0
 579 002c 49       		.uleb128 0x49
 580 002d 13       		.uleb128 0x13
 581 002e 00       		.byte	0
 582 002f 00       		.byte	0
 583 0030 05       		.uleb128 0x5
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 22


 584 0031 16       		.uleb128 0x16
 585 0032 00       		.byte	0
 586 0033 03       		.uleb128 0x3
 587 0034 0E       		.uleb128 0xe
 588 0035 3A       		.uleb128 0x3a
 589 0036 0B       		.uleb128 0xb
 590 0037 3B       		.uleb128 0x3b
 591 0038 0B       		.uleb128 0xb
 592 0039 49       		.uleb128 0x49
 593 003a 13       		.uleb128 0x13
 594 003b 00       		.byte	0
 595 003c 00       		.byte	0
 596 003d 06       		.uleb128 0x6
 597 003e 13       		.uleb128 0x13
 598 003f 01       		.byte	0x1
 599 0040 03       		.uleb128 0x3
 600 0041 0E       		.uleb128 0xe
 601 0042 0B       		.uleb128 0xb
 602 0043 0B       		.uleb128 0xb
 603 0044 3A       		.uleb128 0x3a
 604 0045 0B       		.uleb128 0xb
 605 0046 3B       		.uleb128 0x3b
 606 0047 0B       		.uleb128 0xb
 607 0048 01       		.uleb128 0x1
 608 0049 13       		.uleb128 0x13
 609 004a 00       		.byte	0
 610 004b 00       		.byte	0
 611 004c 07       		.uleb128 0x7
 612 004d 0D       		.uleb128 0xd
 613 004e 00       		.byte	0
 614 004f 03       		.uleb128 0x3
 615 0050 0E       		.uleb128 0xe
 616 0051 3A       		.uleb128 0x3a
 617 0052 0B       		.uleb128 0xb
 618 0053 3B       		.uleb128 0x3b
 619 0054 0B       		.uleb128 0xb
 620 0055 49       		.uleb128 0x49
 621 0056 13       		.uleb128 0x13
 622 0057 38       		.uleb128 0x38
 623 0058 0A       		.uleb128 0xa
 624 0059 00       		.byte	0
 625 005a 00       		.byte	0
 626 005b 08       		.uleb128 0x8
 627 005c 0F       		.uleb128 0xf
 628 005d 00       		.byte	0
 629 005e 0B       		.uleb128 0xb
 630 005f 0B       		.uleb128 0xb
 631 0060 49       		.uleb128 0x49
 632 0061 13       		.uleb128 0x13
 633 0062 00       		.byte	0
 634 0063 00       		.byte	0
 635 0064 09       		.uleb128 0x9
 636 0065 04       		.uleb128 0x4
 637 0066 01       		.byte	0x1
 638 0067 03       		.uleb128 0x3
 639 0068 0E       		.uleb128 0xe
 640 0069 3E       		.uleb128 0x3e
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 23


 641 006a 0B       		.uleb128 0xb
 642 006b 0B       		.uleb128 0xb
 643 006c 0B       		.uleb128 0xb
 644 006d 49       		.uleb128 0x49
 645 006e 13       		.uleb128 0x13
 646 006f 3A       		.uleb128 0x3a
 647 0070 0B       		.uleb128 0xb
 648 0071 3B       		.uleb128 0x3b
 649 0072 0B       		.uleb128 0xb
 650 0073 01       		.uleb128 0x1
 651 0074 13       		.uleb128 0x13
 652 0075 00       		.byte	0
 653 0076 00       		.byte	0
 654 0077 0A       		.uleb128 0xa
 655 0078 28       		.uleb128 0x28
 656 0079 00       		.byte	0
 657 007a 03       		.uleb128 0x3
 658 007b 0E       		.uleb128 0xe
 659 007c 1C       		.uleb128 0x1c
 660 007d 0B       		.uleb128 0xb
 661 007e 00       		.byte	0
 662 007f 00       		.byte	0
 663 0080 0B       		.uleb128 0xb
 664 0081 0F       		.uleb128 0xf
 665 0082 00       		.byte	0
 666 0083 0B       		.uleb128 0xb
 667 0084 0B       		.uleb128 0xb
 668 0085 00       		.byte	0
 669 0086 00       		.byte	0
 670 0087 0C       		.uleb128 0xc
 671 0088 34       		.uleb128 0x34
 672 0089 00       		.byte	0
 673 008a 03       		.uleb128 0x3
 674 008b 0E       		.uleb128 0xe
 675 008c 3A       		.uleb128 0x3a
 676 008d 0B       		.uleb128 0xb
 677 008e 3B       		.uleb128 0x3b
 678 008f 0B       		.uleb128 0xb
 679 0090 49       		.uleb128 0x49
 680 0091 13       		.uleb128 0x13
 681 0092 3F       		.uleb128 0x3f
 682 0093 0C       		.uleb128 0xc
 683 0094 3C       		.uleb128 0x3c
 684 0095 0C       		.uleb128 0xc
 685 0096 00       		.byte	0
 686 0097 00       		.byte	0
 687 0098 0D       		.uleb128 0xd
 688 0099 26       		.uleb128 0x26
 689 009a 00       		.byte	0
 690 009b 49       		.uleb128 0x49
 691 009c 13       		.uleb128 0x13
 692 009d 00       		.byte	0
 693 009e 00       		.byte	0
 694 009f 0E       		.uleb128 0xe
 695 00a0 16       		.uleb128 0x16
 696 00a1 00       		.byte	0
 697 00a2 03       		.uleb128 0x3
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 24


 698 00a3 08       		.uleb128 0x8
 699 00a4 3A       		.uleb128 0x3a
 700 00a5 0B       		.uleb128 0xb
 701 00a6 3B       		.uleb128 0x3b
 702 00a7 0B       		.uleb128 0xb
 703 00a8 49       		.uleb128 0x49
 704 00a9 13       		.uleb128 0x13
 705 00aa 00       		.byte	0
 706 00ab 00       		.byte	0
 707 00ac 0F       		.uleb128 0xf
 708 00ad 2E       		.uleb128 0x2e
 709 00ae 01       		.byte	0x1
 710 00af 3F       		.uleb128 0x3f
 711 00b0 0C       		.uleb128 0xc
 712 00b1 03       		.uleb128 0x3
 713 00b2 0E       		.uleb128 0xe
 714 00b3 3A       		.uleb128 0x3a
 715 00b4 0B       		.uleb128 0xb
 716 00b5 3B       		.uleb128 0x3b
 717 00b6 05       		.uleb128 0x5
 718 00b7 27       		.uleb128 0x27
 719 00b8 0C       		.uleb128 0xc
 720 00b9 11       		.uleb128 0x11
 721 00ba 01       		.uleb128 0x1
 722 00bb 12       		.uleb128 0x12
 723 00bc 01       		.uleb128 0x1
 724 00bd 40       		.uleb128 0x40
 725 00be 06       		.uleb128 0x6
 726 00bf 9642     		.uleb128 0x2116
 727 00c1 0C       		.uleb128 0xc
 728 00c2 01       		.uleb128 0x1
 729 00c3 13       		.uleb128 0x13
 730 00c4 00       		.byte	0
 731 00c5 00       		.byte	0
 732 00c6 10       		.uleb128 0x10
 733 00c7 05       		.uleb128 0x5
 734 00c8 00       		.byte	0
 735 00c9 03       		.uleb128 0x3
 736 00ca 0E       		.uleb128 0xe
 737 00cb 3A       		.uleb128 0x3a
 738 00cc 0B       		.uleb128 0xb
 739 00cd 3B       		.uleb128 0x3b
 740 00ce 05       		.uleb128 0x5
 741 00cf 49       		.uleb128 0x49
 742 00d0 13       		.uleb128 0x13
 743 00d1 02       		.uleb128 0x2
 744 00d2 0A       		.uleb128 0xa
 745 00d3 00       		.byte	0
 746 00d4 00       		.byte	0
 747 00d5 11       		.uleb128 0x11
 748 00d6 34       		.uleb128 0x34
 749 00d7 00       		.byte	0
 750 00d8 03       		.uleb128 0x3
 751 00d9 08       		.uleb128 0x8
 752 00da 3A       		.uleb128 0x3a
 753 00db 0B       		.uleb128 0xb
 754 00dc 3B       		.uleb128 0x3b
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 25


 755 00dd 05       		.uleb128 0x5
 756 00de 49       		.uleb128 0x49
 757 00df 13       		.uleb128 0x13
 758 00e0 02       		.uleb128 0x2
 759 00e1 0A       		.uleb128 0xa
 760 00e2 00       		.byte	0
 761 00e3 00       		.byte	0
 762 00e4 12       		.uleb128 0x12
 763 00e5 34       		.uleb128 0x34
 764 00e6 00       		.byte	0
 765 00e7 03       		.uleb128 0x3
 766 00e8 0E       		.uleb128 0xe
 767 00e9 49       		.uleb128 0x49
 768 00ea 13       		.uleb128 0x13
 769 00eb 34       		.uleb128 0x34
 770 00ec 0C       		.uleb128 0xc
 771 00ed 02       		.uleb128 0x2
 772 00ee 0A       		.uleb128 0xa
 773 00ef 00       		.byte	0
 774 00f0 00       		.byte	0
 775 00f1 13       		.uleb128 0x13
 776 00f2 01       		.uleb128 0x1
 777 00f3 01       		.byte	0x1
 778 00f4 49       		.uleb128 0x49
 779 00f5 13       		.uleb128 0x13
 780 00f6 01       		.uleb128 0x1
 781 00f7 13       		.uleb128 0x13
 782 00f8 00       		.byte	0
 783 00f9 00       		.byte	0
 784 00fa 14       		.uleb128 0x14
 785 00fb 21       		.uleb128 0x21
 786 00fc 00       		.byte	0
 787 00fd 49       		.uleb128 0x49
 788 00fe 13       		.uleb128 0x13
 789 00ff 2F       		.uleb128 0x2f
 790 0100 0B       		.uleb128 0xb
 791 0101 00       		.byte	0
 792 0102 00       		.byte	0
 793 0103 00       		.byte	0
 794              		.section	.debug_loc,"",%progbits
 795              	.Ldebug_loc0:
 796              	.LLST0:
 797 0000 00000000 		.4byte	.LFB16-.Ltext0
 798 0004 02000000 		.4byte	.LCFI0-.Ltext0
 799 0008 0200     		.2byte	0x2
 800 000a 7D       		.byte	0x7d
 801 000b 00       		.sleb128 0
 802 000c 02000000 		.4byte	.LCFI0-.Ltext0
 803 0010 04000000 		.4byte	.LCFI1-.Ltext0
 804 0014 0200     		.2byte	0x2
 805 0016 7D       		.byte	0x7d
 806 0017 08       		.sleb128 8
 807 0018 04000000 		.4byte	.LCFI1-.Ltext0
 808 001c 06000000 		.4byte	.LCFI2-.Ltext0
 809 0020 0300     		.2byte	0x3
 810 0022 7D       		.byte	0x7d
 811 0023 C000     		.sleb128 64
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 26


 812 0025 06000000 		.4byte	.LCFI2-.Ltext0
 813 0029 AA000000 		.4byte	.LCFI3-.Ltext0
 814 002d 0300     		.2byte	0x3
 815 002f 77       		.byte	0x77
 816 0030 C000     		.sleb128 64
 817 0032 AA000000 		.4byte	.LCFI3-.Ltext0
 818 0036 AC000000 		.4byte	.LCFI4-.Ltext0
 819 003a 0200     		.2byte	0x2
 820 003c 77       		.byte	0x77
 821 003d 08       		.sleb128 8
 822 003e AC000000 		.4byte	.LCFI4-.Ltext0
 823 0042 C8000000 		.4byte	.LFE16-.Ltext0
 824 0046 0200     		.2byte	0x2
 825 0048 7D       		.byte	0x7d
 826 0049 08       		.sleb128 8
 827 004a 00000000 		.4byte	0
 828 004e 00000000 		.4byte	0
 829              		.section	.debug_aranges,"",%progbits
 830 0000 1C000000 		.4byte	0x1c
 831 0004 0200     		.2byte	0x2
 832 0006 00000000 		.4byte	.Ldebug_info0
 833 000a 04       		.byte	0x4
 834 000b 00       		.byte	0
 835 000c 0000     		.2byte	0
 836 000e 0000     		.2byte	0
 837 0010 00000000 		.4byte	.Ltext0
 838 0014 C8000000 		.4byte	.Letext0-.Ltext0
 839 0018 00000000 		.4byte	0
 840 001c 00000000 		.4byte	0
 841              		.section	.debug_line,"",%progbits
 842              	.Ldebug_line0:
 843 0000 10010000 		.section	.debug_str,"MS",%progbits,1
 843      0200C700 
 843      00000201 
 843      FB0E0D00 
 843      01010101 
 844              	.LASF23:
 845 0000 5441534B 		.ascii	"TASK_PRIO_TYPE\000"
 845      5F505249 
 845      4F5F5459 
 845      504500
 846              	.LASF13:
 847 000f 53544154 		.ascii	"STATE_SUSPEND_NORMAL\000"
 847      455F5355 
 847      5350454E 
 847      445F4E4F 
 847      524D414C 
 848              	.LASF24:
 849 0024 6C697374 		.ascii	"list_head\000"
 849      5F686561 
 849      6400
 850              	.LASF1:
 851 002e 73686F72 		.ascii	"short int\000"
 851      7420696E 
 851      7400
 852              	.LASF16:
 853 0038 53544154 		.ascii	"STATE_WAIT_MESSAGE_QUEUE_FOREVER\000"
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 27


 853      455F5741 
 853      49545F4D 
 853      45535341 
 853      47455F51 
 854              	.LASF6:
 855 0059 55494E54 		.ascii	"UINT32\000"
 855      333200
 856              	.LASF22:
 857 0060 53544143 		.ascii	"STACK_TYPE\000"
 857      4B5F5459 
 857      504500
 858              	.LASF47:
 859 006b 5461736B 		.ascii	"Task_State\000"
 859      5F537461 
 859      746500
 860              	.LASF18:
 861 0076 53544154 		.ascii	"STATE_PUT_MESSAGE_QUEUE_FOREVER\000"
 861      455F5055 
 861      545F4D45 
 861      53534147 
 861      455F5155 
 862              	.LASF28:
 863 0096 73746163 		.ascii	"stack_end\000"
 863      6B5F656E 
 863      6400
 864              	.LASF15:
 865 00a0 53544154 		.ascii	"STATE_WAIT_MCB_TIMEOUT\000"
 865      455F5741 
 865      49545F4D 
 865      43425F54 
 865      494D454F 
 866              	.LASF17:
 867 00b7 53544154 		.ascii	"STATE_WAIT_MESSAGE_QUEUE_TIMEOUT\000"
 867      455F5741 
 867      49545F4D 
 867      45535341 
 867      47455F51 
 868              	.LASF46:
 869 00d8 463A5C6B 		.ascii	"F:\\kaka\\KAKAOS\\C\\windows\\Project\\RVMDK\243\250"
 869      616B615C 
 869      4B414B41 
 869      4F535C43 
 869      5C77696E 
 870 0100 757635A3 		.ascii	"uv5\243\251\000"
 870      A900
 871              	.LASF2:
 872 0106 6C6F6E67 		.ascii	"long long int\000"
 872      206C6F6E 
 872      6720696E 
 872      7400
 873              	.LASF36:
 874 0114 74696D65 		.ascii	"timeslice_hope_time\000"
 874      736C6963 
 874      655F686F 
 874      70655F74 
 874      696D6500 
 875              	.LASF48:
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 28


 876 0128 74687265 		.ascii	"three\000"
 876      6500
 877              	.LASF50:
 878 012e 5F5F4655 		.ascii	"__FUNCTION__\000"
 878      4E435449 
 878      4F4E5F5F 
 878      00
 879              	.LASF21:
 880 013b 5441534B 		.ascii	"TASK_STATE\000"
 880      5F535441 
 880      544500
 881              	.LASF35:
 882 0146 6E616D65 		.ascii	"name\000"
 882      00
 883              	.LASF3:
 884 014b 756E7369 		.ascii	"unsigned char\000"
 884      676E6564 
 884      20636861 
 884      7200
 885              	.LASF12:
 886 0159 53544154 		.ascii	"STATE_DELAY\000"
 886      455F4445 
 886      4C415900 
 887              	.LASF38:
 888 0165 61747472 		.ascii	"attribution\000"
 888      69627574 
 888      696F6E00 
 889              	.LASF0:
 890 0171 7369676E 		.ascii	"signed char\000"
 890      65642063 
 890      68617200 
 891              	.LASF8:
 892 017d 6C6F6E67 		.ascii	"long long unsigned int\000"
 892      206C6F6E 
 892      6720756E 
 892      7369676E 
 892      65642069 
 893              	.LASF5:
 894 0194 756E7369 		.ascii	"unsigned int\000"
 894      676E6564 
 894      20696E74 
 894      00
 895              	.LASF26:
 896 01a1 73746163 		.ascii	"stack\000"
 896      6B00
 897              	.LASF33:
 898 01a7 73616D65 		.ascii	"same_prio_list\000"
 898      5F707269 
 898      6F5F6C69 
 898      737400
 899              	.LASF4:
 900 01b6 73686F72 		.ascii	"short unsigned int\000"
 900      7420756E 
 900      7369676E 
 900      65642069 
 900      6E7400
 901              	.LASF11:
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 29


 902 01c9 53544154 		.ascii	"STATE_READY\000"
 902      455F5245 
 902      41445900 
 903              	.LASF40:
 904 01d5 63686172 		.ascii	"char\000"
 904      00
 905              	.LASF19:
 906 01da 53544154 		.ascii	"STATE_PUT_MESSAGE_QUEUE_TIMEOUT\000"
 906      455F5055 
 906      545F4D45 
 906      53534147 
 906      455F5155 
 907              	.LASF45:
 908 01fa 2E2E2F2E 		.ascii	"../../source/main/user.c\000"
 908      2E2F736F 
 908      75726365 
 908      2F6D6169 
 908      6E2F7573 
 909              	.LASF43:
 910 0213 4F535443 		.ascii	"OSTCBHighRdyPtr\000"
 910      42486967 
 910      68526479 
 910      50747200 
 911              	.LASF32:
 912 0223 64656C61 		.ascii	"delay_heap_position\000"
 912      795F6865 
 912      61705F70 
 912      6F736974 
 912      696F6E00 
 913              	.LASF31:
 914 0237 7461736B 		.ascii	"task_state\000"
 914      5F737461 
 914      746500
 915              	.LASF37:
 916 0242 74696D65 		.ascii	"timeslice_rest_time\000"
 916      736C6963 
 916      655F7265 
 916      73745F74 
 916      696D6500 
 917              	.LASF49:
 918 0256 70617261 		.ascii	"para\000"
 918      00
 919              	.LASF14:
 920 025b 53544154 		.ascii	"STATE_WAIT_MCB_FOREVER\000"
 920      455F5741 
 920      49545F4D 
 920      43425F46 
 920      4F524556 
 921              	.LASF25:
 922 0272 7461736B 		.ascii	"task_control_block_struct\000"
 922      5F636F6E 
 922      74726F6C 
 922      5F626C6F 
 922      636B5F73 
 923              	.LASF27:
 924 028c 73746163 		.ascii	"stack_size\000"
 924      6B5F7369 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 30


 924      7A6500
 925              	.LASF30:
 926 0297 72657365 		.ascii	"reserve_prio\000"
 926      7276655F 
 926      7072696F 
 926      00
 927              	.LASF34:
 928 02a4 73757370 		.ascii	"suspend_list\000"
 928      656E645F 
 928      6C697374 
 928      00
 929              	.LASF41:
 930 02b1 675F696E 		.ascii	"g_interrupt_count\000"
 930      74657272 
 930      7570745F 
 930      636F756E 
 930      7400
 931              	.LASF44:
 932 02c3 474E5520 		.ascii	"GNU C11 7.3.1 20180622 (release) [ARM/embedded-7-br"
 932      43313120 
 932      372E332E 
 932      31203230 
 932      31383036 
 933 02f6 616E6368 		.ascii	"anch revision 261907] -mcpu=cortex-m3 -mthumb -mapc"
 933      20726576 
 933      6973696F 
 933      6E203236 
 933      31393037 
 934 0329 732D6672 		.ascii	"s-frame -mthumb-interwork -mcpu=cortex-m3 -mthumb -"
 934      616D6520 
 934      2D6D7468 
 934      756D622D 
 934      696E7465 
 935 035c 67647761 		.ascii	"gdwarf-2 -O0\000"
 935      72662D32 
 935      202D4F30 
 935      00
 936              	.LASF20:
 937 0369 53544154 		.ascii	"STATE_WAIT_MUTEX_FOREVER\000"
 937      455F5741 
 937      49545F4D 
 937      55544558 
 937      5F464F52 
 938              	.LASF10:
 939 0382 70726576 		.ascii	"prev\000"
 939      00
 940              	.LASF39:
 941 0387 64656C61 		.ascii	"delay_reach_time\000"
 941      795F7265 
 941      6163685F 
 941      74696D65 
 941      00
 942              	.LASF7:
 943 0398 55494E54 		.ascii	"UINT64\000"
 943      363400
 944              	.LASF29:
 945 039f 7072696F 		.ascii	"prio\000"
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 31


 945      00
 946              	.LASF42:
 947 03a4 4F535443 		.ascii	"OSTCBCurPtr\000"
 947      42437572 
 947      50747200 
 948              	.LASF9:
 949 03b0 6E657874 		.ascii	"next\000"
 949      00
 950              		.ident	"GCC: (GNU Tools for Arm Embedded Processors 7-2018-q2-update) 7.3.1 20180622 (release) [AR
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 user.c
G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s:16     .rodata:00000000 $d
G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s:32     .text:00000000 $t
G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s:39     .text:00000000 three
G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s:150    .text:000000b0 $d
G:\Users\Jaxb\AppData\Local\Temp\ccEV3rui.s:163    .rodata:00000068 __FUNCTION__.4748

UNDEFINED SYMBOLS
ka_printf
ka_malloc
insert_break_point
ka_free
