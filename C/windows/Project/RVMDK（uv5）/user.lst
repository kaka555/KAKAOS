ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"user.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	2
  17              	.LC0:
  18 0000 676F696E 		.ascii	"going to task three\012\000"
  18      6720746F 
  18      20746173 
  18      6B207468 
  18      7265650A 
  19 0015 000000   		.align	2
  20              	.LC1:
  21 0018 69206973 		.ascii	"i is %u,address is %p\012\000"
  21      2025752C 
  21      61646472 
  21      65737320 
  21      69732025 
  22 002f 00       		.align	2
  23              	.LC2:
  24 0030 2E2E2F2E 		.ascii	"../../source/user/user.c\000"
  24      2E2F736F 
  24      75726365 
  24      2F757365 
  24      722F7573 
  25 0049 000000   		.align	2
  26              	.LC3:
  27 004c 72656C65 		.ascii	"release address\012\000"
  27      61736520 
  27      61646472 
  27      6573730A 
  27      00
  28 005d 000000   		.align	2
  29              	.LC4:
  30 0060 656E640A 		.ascii	"end\012\000"
  30      00
  31              		.text
  32              		.align	1
  33              		.global	three
  34              		.syntax unified
  35              		.thumb
  36              		.thumb_func
  37              		.fpu softvfp
  38              		.type	three, %function
  39              	three:
  40              	.LFB24:
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 2


  41              		.file 1 "../../source/user/user.c"
   1:../../source/user/user.c **** #include "user.h"
   2:../../source/user/user.c **** #include "osinit.h"
   3:../../source/user/user.c **** #include <os_delay.h>
   4:../../source/user/user.c **** 
   5:../../source/user/user.c **** 
   6:../../source/user/user.c **** extern volatile TCB *OSTCBCurPtr;
   7:../../source/user/user.c **** extern volatile TCB *OSTCBHighRdyPtr;
   8:../../source/user/user.c **** 
   9:../../source/user/user.c **** #if 0
  10:../../source/user/user.c **** void three(void *para)
  11:../../source/user/user.c **** {
  12:../../source/user/user.c **** 	ka_printf("go into task three\n");
  13:../../source/user/user.c **** 	ka_printf("get out of task three\n");
  14:../../source/user/user.c **** }
  15:../../source/user/user.c **** void four(void *para)
  16:../../source/user/user.c **** {
  17:../../source/user/user.c **** 	while(1)
  18:../../source/user/user.c **** 	{
  19:../../source/user/user.c **** 		ka_printf("four\n");
  20:../../source/user/user.c **** 		suspend();
  21:../../source/user/user.c **** 	}
  22:../../source/user/user.c **** }
  23:../../source/user/user.c **** 
  24:../../source/user/user.c **** void five(void *para)
  25:../../source/user/user.c **** {
  26:../../source/user/user.c **** int i,j;
  27:../../source/user/user.c **** 	while(1)
  28:../../source/user/user.c **** 	{
  29:../../source/user/user.c **** 			//ka_printf("55\n");
  30:../../source/user/user.c **** 		for(i=0;i<5000;++i)
  31:../../source/user/user.c **** 		{
  32:../../source/user/user.c **** 			for(j=0;j<1000;++j)
  33:../../source/user/user.c **** 			{
  34:../../source/user/user.c **** 				;
  35:../../source/user/user.c **** 			}
  36:../../source/user/user.c **** 		}
  37:../../source/user/user.c **** 	}
  38:../../source/user/user.c **** }
  39:../../source/user/user.c **** 
  40:../../source/user/user.c **** void six(void *para)
  41:../../source/user/user.c **** {
  42:../../source/user/user.c **** int i,j;
  43:../../source/user/user.c **** 	while(1)
  44:../../source/user/user.c **** 	{
  45:../../source/user/user.c **** 			ka_printf("six\n");
  46:../../source/user/user.c **** 		for(i=0;i<5000;++i)
  47:../../source/user/user.c **** 		{
  48:../../source/user/user.c **** 			for(j=0;j<1000;++j)
  49:../../source/user/user.c **** 			{
  50:../../source/user/user.c **** 				;
  51:../../source/user/user.c **** 			}
  52:../../source/user/user.c **** 		}
  53:../../source/user/user.c **** 		
  54:../../source/user/user.c **** 	}
  55:../../source/user/user.c **** }
  56:../../source/user/user.c **** #endif
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 3


  57:../../source/user/user.c **** 
  58:../../source/user/user.c **** #if 0
  59:../../source/user/user.c **** static void ka(void *para)
  60:../../source/user/user.c **** {
  61:../../source/user/user.c **** 	ka_printf("task three timer test\n");
  62:../../source/user/user.c **** }
  63:../../source/user/user.c **** struct timer kaka;
  64:../../source/user/user.c **** void three(void *para)
  65:../../source/user/user.c **** {
  66:../../source/user/user.c **** 	
  67:../../source/user/user.c **** 	if(timer_init(&kaka,TIMER_PERIODIC,"test",ka,NULL,15,10) < 0)
  68:../../source/user/user.c **** 	{
  69:../../source/user/user.c **** 		ka_printf("fatal error\n");
  70:../../source/user/user.c **** 	}
  71:../../source/user/user.c **** 	if(timer_enable(&kaka) < 0)
  72:../../source/user/user.c **** 	{
  73:../../source/user/user.c **** 		ka_printf("fatal error\n");
  74:../../source/user/user.c **** 	}
  75:../../source/user/user.c **** 	suspend();
  76:../../source/user/user.c **** 	while(1)
  77:../../source/user/user.c **** 	{
  78:../../source/user/user.c **** 
  79:../../source/user/user.c **** 	}
  80:../../source/user/user.c **** }
  81:../../source/user/user.c **** void four(void *para)
  82:../../source/user/user.c **** {
  83:../../source/user/user.c **** 	while(1)
  84:../../source/user/user.c **** 	{
  85:../../source/user/user.c **** 		ka_printf("four\n");
  86:../../source/user/user.c **** 		sleep(HZ);
  87:../../source/user/user.c **** 	}
  88:../../source/user/user.c **** }
  89:../../source/user/user.c **** #endif
  90:../../source/user/user.c **** 
  91:../../source/user/user.c **** #if 0 //test timer
  92:../../source/user/user.c **** static void ka(void *para)
  93:../../source/user/user.c **** {
  94:../../source/user/user.c **** 	ka_printf("task three timer test ka\n");
  95:../../source/user/user.c **** }
  96:../../source/user/user.c **** 
  97:../../source/user/user.c **** static void kb(void *para)
  98:../../source/user/user.c **** {
  99:../../source/user/user.c **** 	ka_printf("task three timer test kb\n");
 100:../../source/user/user.c **** }
 101:../../source/user/user.c **** struct timer timer1;
 102:../../source/user/user.c **** struct timer timer0;
 103:../../source/user/user.c **** void three(void *para)
 104:../../source/user/user.c **** {
 105:../../source/user/user.c **** 	timer_init(&timer0, TIMER_ONE_TIME, "T1", ka, 0, 15, 8);
 106:../../source/user/user.c **** 	timer_enable(&timer0);
 107:../../source/user/user.c **** 	suspend();
 108:../../source/user/user.c **** }
 109:../../source/user/user.c **** 
 110:../../source/user/user.c **** void four(void *para)
 111:../../source/user/user.c **** {
 112:../../source/user/user.c **** 	timer_init(&timer1, TIMER_TIME, "T2", kb, 0, 20, 8);
 113:../../source/user/user.c **** 	timer_enable(&timer1);
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 4


 114:../../source/user/user.c **** 	suspend();
 115:../../source/user/user.c **** }
 116:../../source/user/user.c **** 
 117:../../source/user/user.c **** #endif
 118:../../source/user/user.c **** 
 119:../../source/user/user.c **** #if 0
 120:../../source/user/user.c **** void three(void *para)
 121:../../source/user/user.c **** {
 122:../../source/user/user.c **** 	int i = 5;
 123:../../source/user/user.c **** 	int ia = 7;
 124:../../source/user/user.c **** 	double kaka = 6.66;
 125:../../source/user/user.c **** 	shell_insert_variable_INT("i",&i);
 126:../../source/user/user.c **** 	shell_insert_variable_INT("ia",&ia);
 127:../../source/user/user.c **** 	shell_insert_variable_FLOAT("kaka",&kaka);
 128:../../source/user/user.c **** 	ka_printf("address of i is %x\n",&i);
 129:../../source/user/user.c **** 	ka_printf("address of ia is %x\n",&ia);
 130:../../source/user/user.c **** 	ka_printf("address of kaka is %x\n",&kaka);
 131:../../source/user/user.c **** 	ka_printf("i is %d\n",i);
 132:../../source/user/user.c **** 	ka_printf("ia is %d\n",ia);
 133:../../source/user/user.c **** 	ka_printf("kaka is %f\n",kaka);
 134:../../source/user/user.c **** 	INSERT_BREAK_POINT();
 135:../../source/user/user.c **** 	ka_printf("i is %d\n",i);
 136:../../source/user/user.c **** 	ka_printf("ia is %d\n",ia);
 137:../../source/user/user.c **** 	ka_printf("kaka is %f\n",kaka);
 138:../../source/user/user.c **** 	INSERT_BREAK_POINT();
 139:../../source/user/user.c **** 	ka_printf("i is %d\n",i);
 140:../../source/user/user.c **** 	ka_printf("ia is %d\n",ia);
 141:../../source/user/user.c **** 	ka_printf("kaka is %f\n",kaka);
 142:../../source/user/user.c **** 	while(1)
 143:../../source/user/user.c **** 	{
 144:../../source/user/user.c **** 		ka_printf("three\n");	
 145:../../source/user/user.c **** 		sleep(10);	
 146:../../source/user/user.c **** 	}	
 147:../../source/user/user.c **** }
 148:../../source/user/user.c **** #endif
 149:../../source/user/user.c **** 
 150:../../source/user/user.c **** #if 0
 151:../../source/user/user.c **** void six(void *para)
 152:../../source/user/user.c **** {
 153:../../source/user/user.c **** 	
 154:../../source/user/user.c **** }
 155:../../source/user/user.c **** void five(void *para)
 156:../../source/user/user.c **** {
 157:../../source/user/user.c **** 	while(1)
 158:../../source/user/user.c **** 	{
 159:../../source/user/user.c **** 		ka_printf("five\n");	
 160:../../source/user/user.c **** 		sleep(20);	
 161:../../source/user/user.c **** 	}	
 162:../../source/user/user.c **** }
 163:../../source/user/user.c **** void four(void *para)
 164:../../source/user/user.c **** {
 165:../../source/user/user.c **** 	while(1)
 166:../../source/user/user.c **** 	{
 167:../../source/user/user.c **** 		ka_printf("four\n");	
 168:../../source/user/user.c **** 		sleep(30);	
 169:../../source/user/user.c **** 	}	
 170:../../source/user/user.c **** }
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 5


 171:../../source/user/user.c **** void three(void *para)
 172:../../source/user/user.c **** {
 173:../../source/user/user.c **** 		void *ptr[64];
 174:../../source/user/user.c **** int i;
 175:../../source/user/user.c **** 	for(i=0;i<64;++i)
 176:../../source/user/user.c **** 	{
 177:../../source/user/user.c **** 		ptr[i] = KA_MALLOC(sizeof(int));
 178:../../source/user/user.c **** 		ka_printf("%d get ptr address is %x \n",i,(int)ptr[i]);
 179:../../source/user/user.c **** 		ka_printf("value %d is %x\n",i,*(int *)ptr[i]);
 180:../../source/user/user.c **** 		*(int *)ptr[i] = 66;
 181:../../source/user/user.c **** 	}
 182:../../source/user/user.c **** 	
 183:../../source/user/user.c **** 	void *kaka = KA_MALLOC(48);
 184:../../source/user/user.c **** 	ka_printf("ptr--kaka get ptr address is %x \n",(int)kaka);
 185:../../source/user/user.c **** 	
 186:../../source/user/user.c **** 	//sleep(300);
 187:../../source/user/user.c **** 	
 188:../../source/user/user.c **** 	ka_free(kaka);
 189:../../source/user/user.c **** 	ka_printf("free complete\n");
 190:../../source/user/user.c **** 	ka_free(ptr[24]);
 191:../../source/user/user.c **** 	ka_printf("free complete\n");
 192:../../source/user/user.c **** 	
 193:../../source/user/user.c **** 	ka_free(ptr[31]);
 194:../../source/user/user.c **** 	ka_printf("free complete\n");
 195:../../source/user/user.c **** 	ka_free(ptr[7]);
 196:../../source/user/user.c **** 	
 197:../../source/user/user.c **** 	ka_free(ptr[62]);
 198:../../source/user/user.c **** 	
 199:../../source/user/user.c **** 	ka_printf("free complete\n");
 200:../../source/user/user.c **** 	
 201:../../source/user/user.c **** 	kaka = KA_MALLOC(120);
 202:../../source/user/user.c **** 	ka_printf("ptr--kaka get ptr address is %x \n",(int)kaka);
 203:../../source/user/user.c **** 	
 204:../../source/user/user.c **** 	//sleep(300);
 205:../../source/user/user.c **** 	
 206:../../source/user/user.c **** 	ka_free(kaka);
 207:../../source/user/user.c **** 	ka_printf("free kaka complete\n");
 208:../../source/user/user.c **** 	
 209:../../source/user/user.c **** 	while(1)
 210:../../source/user/user.c **** 	{
 211:../../source/user/user.c **** 	}	
 212:../../source/user/user.c **** }
 213:../../source/user/user.c **** #endif
 214:../../source/user/user.c **** 
 215:../../source/user/user.c **** #if 0 // test int sleep(unsigned int)
 216:../../source/user/user.c **** void three(void *para)
 217:../../source/user/user.c **** {
 218:../../source/user/user.c **** 	TCB *TCB_ptr4,*TCB_ptr5;
 219:../../source/user/user.c **** 	if(0 != task_creat_ready(256,5,5,"five",five,NULL,&TCB_ptr5))
 220:../../source/user/user.c **** 	{
 221:../../source/user/user.c **** 		ka_printf("os_init_fail...stop booting...\n");
 222:../../source/user/user.c **** 		while(1);
 223:../../source/user/user.c **** 	}
 224:../../source/user/user.c **** 	if(0 != task_creat_ready(256,5,5,"four",four,NULL,&TCB_ptr4))
 225:../../source/user/user.c **** 	{
 226:../../source/user/user.c **** 		ka_printf("os_init_fail...stop booting...\n");
 227:../../source/user/user.c **** 		while(1);
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 6


 228:../../source/user/user.c **** 	}
 229:../../source/user/user.c **** 	int ret = sleep(30);
 230:../../source/user/user.c **** 	ka_printf("task three ret is %d\n",ret);
 231:../../source/user/user.c **** 	if(0 != _remove_from_delay_heap(TCB_ptr5))
 232:../../source/user/user.c **** 	{
 233:../../source/user/user.c **** 		ka_printf("fatal error\n");
 234:../../source/user/user.c **** 	}
 235:../../source/user/user.c **** 	if(0 != _remove_from_delay_heap(TCB_ptr4))
 236:../../source/user/user.c **** 	{
 237:../../source/user/user.c **** 		ka_printf("fatal error\n");
 238:../../source/user/user.c **** 	}
 239:../../source/user/user.c **** 	suspend();
 240:../../source/user/user.c **** 	while(1);
 241:../../source/user/user.c **** }
 242:../../source/user/user.c **** 
 243:../../source/user/user.c **** void five(void *para)
 244:../../source/user/user.c **** {
 245:../../source/user/user.c **** 	int ret = sleep(58);
 246:../../source/user/user.c **** 	ka_printf("task five ret is %d\n",ret);
 247:../../source/user/user.c **** 	suspend();
 248:../../source/user/user.c **** 	while(1);
 249:../../source/user/user.c **** }
 250:../../source/user/user.c **** void four(void *para)
 251:../../source/user/user.c **** {
 252:../../source/user/user.c **** 	int ret = sleep(40);
 253:../../source/user/user.c **** 	ka_printf("task four ret is %d\n",ret);
 254:../../source/user/user.c **** 	suspend();
 255:../../source/user/user.c **** 	while(1);
 256:../../source/user/user.c **** }
 257:../../source/user/user.c **** #endif
 258:../../source/user/user.c **** 
 259:../../source/user/user.c **** #if 0 // test message queue
 260:../../source/user/user.c **** MQB MQB_test;
 261:../../source/user/user.c **** 
 262:../../source/user/user.c **** void three(void *para)
 263:../../source/user/user.c **** {
 264:../../source/user/user.c **** 	int i;
 265:../../source/user/user.c **** 	msg_init(&MQB_test,"test",3);
 266:../../source/user/user.c **** 	struct message array[10];
 267:../../source/user/user.c **** 	array[9].tick = 1;
 268:../../source/user/user.c **** //	for(i=0;i<4;++i)
 269:../../source/user/user.c **** //	{
 270:../../source/user/user.c **** //		if(0 != message_init(array+i,4,(void *)i))
 271:../../source/user/user.c **** //		{
 272:../../source/user/user.c **** //			ka_printf("message_init error\n");
 273:../../source/user/user.c **** //		}
 274:../../source/user/user.c **** //	}
 275:../../source/user/user.c **** //	for(i=0;i<3;++i)
 276:../../source/user/user.c **** //	{
 277:../../source/user/user.c **** //		if(0 != msg_send(&MQB_test,array+i,MSG_FLAG_NON_BLOCKING,456))
 278:../../source/user/user.c **** //		{
 279:../../source/user/user.c **** //			ka_printf("msg_send error\n");
 280:../../source/user/user.c **** //		}
 281:../../source/user/user.c **** //	}
 282:../../source/user/user.c **** //	if(0 != msg_send(&MQB_test,array+i,MSG_FLAG_WAIT,20))
 283:../../source/user/user.c **** //	{
 284:../../source/user/user.c **** //		ka_printf("msg_send error\n");
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 7


 285:../../source/user/user.c **** //	}
 286:../../source/user/user.c **** 	ka_printf("complete\n");
 287:../../source/user/user.c **** 	suspend();
 288:../../source/user/user.c **** 	while(1);
 289:../../source/user/user.c **** }
 290:../../source/user/user.c **** 	
 291:../../source/user/user.c **** 
 292:../../source/user/user.c **** void four(void *para)
 293:../../source/user/user.c **** {
 294:../../source/user/user.c **** 	struct message *message_ptr;
 295:../../source/user/user.c **** 	while(1)
 296:../../source/user/user.c **** 	{
 297:../../source/user/user.c **** 		if(0 != msg_receive(&MQB_test,&message_ptr,MSG_FLAG_WAIT,0))
 298:../../source/user/user.c **** 		{
 299:../../source/user/user.c **** 			ka_printf("msg_send error\n");
 300:../../source/user/user.c **** 		}
 301:../../source/user/user.c **** 		else
 302:../../source/user/user.c **** 		{
 303:../../source/user/user.c **** 			ka_printf("task four get a message\n");
 304:../../source/user/user.c **** 			ka_printf("size is %u\n",message_ptr->message_size);
 305:../../source/user/user.c **** 			ka_printf("data is %u\n",(unsigned int)(message_ptr->message_data_ptr));
 306:../../source/user/user.c **** 			ka_printf("tick is %l\n",message_ptr->tick);
 307:../../source/user/user.c **** 			ka_printf("=====================================");
 308:../../source/user/user.c **** 		}
 309:../../source/user/user.c **** 	}
 310:../../source/user/user.c **** }
 311:../../source/user/user.c **** #endif
 312:../../source/user/user.c **** 
 313:../../source/user/user.c **** 
 314:../../source/user/user.c **** #if 0 //test mutex
 315:../../source/user/user.c **** MUTEX kaka;
 316:../../source/user/user.c **** 
 317:../../source/user/user.c **** void three(void *para)
 318:../../source/user/user.c **** {
 319:../../source/user/user.c **** 	sleep(10*HZ);
 320:../../source/user/user.c **** 	mutex_lock(&kaka);
 321:../../source/user/user.c **** 	ka_printf("task three success to lock mutex\n");
 322:../../source/user/user.c **** 	ka_printf("now task three prio is %u\n",OSTCBCurPtr->prio);
 323:../../source/user/user.c **** 	ka_printf("release lock\n");
 324:../../source/user/user.c **** 	int ret = mutex_unlock(&kaka);
 325:../../source/user/user.c **** 	ka_printf("task three unlock ret is %d\n",ret);
 326:../../source/user/user.c **** 	ka_printf("now task three prio is %u\n",OSTCBCurPtr->prio);
 327:../../source/user/user.c **** }
 328:../../source/user/user.c **** 
 329:../../source/user/user.c **** void four(void *para)
 330:../../source/user/user.c **** {
 331:../../source/user/user.c **** 	sleep(5*HZ);
 332:../../source/user/user.c **** 	mutex_lock(&kaka);
 333:../../source/user/user.c **** 	ka_printf("task four success to lock mutex\n");
 334:../../source/user/user.c **** 	ka_printf("now task four prio is %u\n",OSTCBCurPtr->prio);
 335:../../source/user/user.c **** 	ka_printf("release lock\n");
 336:../../source/user/user.c **** 	int ret = mutex_unlock(&kaka);
 337:../../source/user/user.c **** 	ka_printf("task four unlock ret is %d\n",ret);
 338:../../source/user/user.c **** 	ka_printf("now task four prio is %u\n",OSTCBCurPtr->prio);
 339:../../source/user/user.c **** }
 340:../../source/user/user.c **** 
 341:../../source/user/user.c **** void five(void *para)
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 8


 342:../../source/user/user.c **** {
 343:../../source/user/user.c **** 	mutex_init(&kaka);
 344:../../source/user/user.c **** 	int ret = mutex_lock(&kaka);
 345:../../source/user/user.c **** 	if(0 > ret)
 346:../../source/user/user.c **** 	{
 347:../../source/user/user.c **** 		ka_printf("lock fail\n");
 348:../../source/user/user.c **** 	}
 349:../../source/user/user.c **** 	else
 350:../../source/user/user.c **** 	{
 351:../../source/user/user.c **** 		ka_printf("task five success to lock mutex\n");
 352:../../source/user/user.c **** 	}
 353:../../source/user/user.c **** 	sleep(7*HZ);
 354:../../source/user/user.c **** 	ka_printf("now task five prio is %u\n",OSTCBCurPtr->prio);
 355:../../source/user/user.c **** 	sleep(5*HZ);
 356:../../source/user/user.c **** 	ka_printf("now task five prio is %u\n",OSTCBCurPtr->prio);
 357:../../source/user/user.c **** 	ret = mutex_unlock(&kaka);
 358:../../source/user/user.c **** 	ka_printf("task five unlock ret is %d\n",ret);
 359:../../source/user/user.c **** 	ka_printf("now task five prio is %u\n",OSTCBCurPtr->prio);
 360:../../source/user/user.c **** }
 361:../../source/user/user.c **** 
 362:../../source/user/user.c **** #endif
 363:../../source/user/user.c **** #if 0 //test delay_ms
 364:../../source/user/user.c **** #include "bsp_led.h"  
 365:../../source/user/user.c **** void three(void *para)
 366:../../source/user/user.c **** {
 367:../../source/user/user.c **** 	LED_GPIO_Config();
 368:../../source/user/user.c **** 
 369:../../source/user/user.c **** 	LED1_OFF;
 370:../../source/user/user.c **** 	delay_ms(10);
 371:../../source/user/user.c **** 	LED1_ON;
 372:../../source/user/user.c **** 
 373:../../source/user/user.c **** }
 374:../../source/user/user.c **** #endif
 375:../../source/user/user.c **** 
 376:../../source/user/user.c **** #if 0 //test context switch's time
 377:../../source/user/user.c **** #include "bsp_led.h"
 378:../../source/user/user.c **** void three(void *para)
 379:../../source/user/user.c **** {
 380:../../source/user/user.c **** 	LED_GPIO_Config();
 381:../../source/user/user.c **** 	LED1_OFF;
 382:../../source/user/user.c **** 	sleep(100);
 383:../../source/user/user.c **** 	//suspend();
 384:../../source/user/user.c **** 	while(1);
 385:../../source/user/user.c **** }
 386:../../source/user/user.c **** 
 387:../../source/user/user.c **** void four(void *para)
 388:../../source/user/user.c **** {
 389:../../source/user/user.c **** 	LED1_ON;
 390:../../source/user/user.c **** 	while(1);
 391:../../source/user/user.c **** }
 392:../../source/user/user.c **** //void five(void *para)
 393:../../source/user/user.c **** //{
 394:../../source/user/user.c **** //	while(1);
 395:../../source/user/user.c **** //}
 396:../../source/user/user.c **** //void six(void *para)
 397:../../source/user/user.c **** //{
 398:../../source/user/user.c **** //	while(1);
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 9


 399:../../source/user/user.c **** //}
 400:../../source/user/user.c **** #endif
 401:../../source/user/user.c **** 
 402:../../source/user/user.c **** #if 0 //test new memory management
 403:../../source/user/user.c **** 
 404:../../source/user/user.c **** void three(void *para)
 405:../../source/user/user.c **** {
 406:../../source/user/user.c **** 	void *ptr[31];
 407:../../source/user/user.c **** 	int i;
 408:../../source/user/user.c **** 	_get_os_buddy_ptr_head();
 409:../../source/user/user.c **** 	ka_printf("%p\n",_alloc_power2_page());
 410:../../source/user/user.c **** 	ka_printf("%p\n",_alloc_power3_page());
 411:../../source/user/user.c **** 	ka_printf("%p\n",_alloc_power4_page());
 412:../../source/user/user.c **** 	ka_printf("%p\n",_alloc_power6_page());
 413:../../source/user/user.c **** 	while(1)
 414:../../source/user/user.c **** 	{
 415:../../source/user/user.c **** 		for(i=0;i<31;++i)
 416:../../source/user/user.c **** 		{
 417:../../source/user/user.c **** 			ptr[i] = ka_malloc(500);
 418:../../source/user/user.c **** 			ka_printf("ptr[%d] is %p\n",i,ptr[i]);
 419:../../source/user/user.c **** 		}
 420:../../source/user/user.c **** 		sleep(200 * HZ);
 421:../../source/user/user.c **** 		for(i=0;i<31;++i)
 422:../../source/user/user.c **** 		{
 423:../../source/user/user.c **** 			ka_free(ptr[i]);
 424:../../source/user/user.c **** 		}
 425:../../source/user/user.c **** 		ka_printf("free complete\n");
 426:../../source/user/user.c **** 		sleep(500 * HZ);
 427:../../source/user/user.c **** 	}
 428:../../source/user/user.c **** }
 429:../../source/user/user.c **** 
 430:../../source/user/user.c **** #endif
 431:../../source/user/user.c **** 
 432:../../source/user/user.c **** #if 0 //test delete_MCB()
 433:../../source/user/user.c **** 
 434:../../source/user/user.c **** MCB kaka;
 435:../../source/user/user.c **** 
 436:../../source/user/user.c **** void three(void *para)
 437:../../source/user/user.c **** {
 438:../../source/user/user.c **** 	init_MCB(&kaka,0);
 439:../../source/user/user.c **** 	ka_printf("task three going to p()\n");
 440:../../source/user/user.c **** 	int ret = p(&kaka,MCB_FLAG_WAIT,0);
 441:../../source/user/user.c **** 	ka_printf("task three ret is %d\n",ret);
 442:../../source/user/user.c **** }
 443:../../source/user/user.c **** 
 444:../../source/user/user.c **** void four(void *para)
 445:../../source/user/user.c **** {
 446:../../source/user/user.c **** 	ka_printf("task four going to p()\n");
 447:../../source/user/user.c **** 	int ret = p(&kaka,MCB_FLAG_WAIT,0);
 448:../../source/user/user.c **** 	ka_printf("task four ret is %d\n",ret);
 449:../../source/user/user.c **** }
 450:../../source/user/user.c **** 
 451:../../source/user/user.c **** void five(void *para)
 452:../../source/user/user.c **** {
 453:../../source/user/user.c **** 	ka_printf("task five going to delete_MCB()\n");
 454:../../source/user/user.c **** 	delete_MCB(&kaka);
 455:../../source/user/user.c **** 	ka_printf("delete completed\n");
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 10


 456:../../source/user/user.c **** }
 457:../../source/user/user.c **** 
 458:../../source/user/user.c **** #endif
 459:../../source/user/user.c **** 
 460:../../source/user/user.c **** #if 0 //test msg_del()
 461:../../source/user/user.c **** 
 462:../../source/user/user.c **** MQB kaka;
 463:../../source/user/user.c **** 
 464:../../source/user/user.c **** void three(void *para)
 465:../../source/user/user.c **** {
 466:../../source/user/user.c **** 	struct message *a;
 467:../../source/user/user.c **** 	msg_init(&kaka,"kaka",8);
 468:../../source/user/user.c **** 	ka_printf("task three going to msg_receive()\n");
 469:../../source/user/user.c **** 	int ret = msg_receive(&kaka,&a,MSG_FLAG_WAIT,0);
 470:../../source/user/user.c **** 	ka_printf("task three ret is %d\n",ret);
 471:../../source/user/user.c **** }
 472:../../source/user/user.c **** 
 473:../../source/user/user.c **** void four(void *para)
 474:../../source/user/user.c **** {
 475:../../source/user/user.c **** 	struct message *a;
 476:../../source/user/user.c **** 	ka_printf("task four going to msg_receive()\n");
 477:../../source/user/user.c **** 	int ret = msg_receive(&kaka,&a,MSG_FLAG_WAIT,0);
 478:../../source/user/user.c **** 	ka_printf("task four ret is %d\n",ret);
 479:../../source/user/user.c **** }
 480:../../source/user/user.c **** 
 481:../../source/user/user.c **** void five(void *para)
 482:../../source/user/user.c **** {
 483:../../source/user/user.c **** 	ka_printf("task five going to msg_del()\n");
 484:../../source/user/user.c **** 	msg_del(&kaka);
 485:../../source/user/user.c **** 	ka_printf("delete completed\n");
 486:../../source/user/user.c **** }
 487:../../source/user/user.c **** 
 488:../../source/user/user.c **** #endif
 489:../../source/user/user.c **** 
 490:../../source/user/user.c **** #if 0 //test mutex_del()
 491:../../source/user/user.c **** 
 492:../../source/user/user.c **** MUTEX kaka;
 493:../../source/user/user.c **** 
 494:../../source/user/user.c **** void three(void *para)
 495:../../source/user/user.c **** {
 496:../../source/user/user.c **** 	mutex_init(&kaka);
 497:../../source/user/user.c **** 	sleep(5*HZ);
 498:../../source/user/user.c **** 	ka_printf("task three going to mutex_lock()\n");
 499:../../source/user/user.c **** 	int ret = mutex_lock(&kaka);
 500:../../source/user/user.c **** 	ka_printf("task three ret is %d\n",ret);
 501:../../source/user/user.c **** }
 502:../../source/user/user.c **** 
 503:../../source/user/user.c **** void four(void *para)
 504:../../source/user/user.c **** {
 505:../../source/user/user.c **** 	sleep(5*HZ);
 506:../../source/user/user.c **** 	ka_printf("task four going to mutex_lock()\n");
 507:../../source/user/user.c **** 	int ret = mutex_lock(&kaka);
 508:../../source/user/user.c **** 	ka_printf("task four ret is %d\n",ret);
 509:../../source/user/user.c **** }
 510:../../source/user/user.c **** 
 511:../../source/user/user.c **** void five(void *para)
 512:../../source/user/user.c **** {
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 11


 513:../../source/user/user.c **** 	ka_printf("task five going to mutex_lock()\n");
 514:../../source/user/user.c **** 	mutex_lock(&kaka);
 515:../../source/user/user.c **** 	sleep(10*HZ);
 516:../../source/user/user.c **** 	ka_printf("task five going to mutex_del()\n");
 517:../../source/user/user.c **** 	mutex_del(&kaka);
 518:../../source/user/user.c **** 	ka_printf("delete completed\n");
 519:../../source/user/user.c **** }
 520:../../source/user/user.c **** 
 521:../../source/user/user.c **** #endif
 522:../../source/user/user.c **** 
 523:../../source/user/user.c **** #if 0 //test MCB
 524:../../source/user/user.c **** 
 525:../../source/user/user.c **** MCB kaka;
 526:../../source/user/user.c **** 
 527:../../source/user/user.c **** void three(void *para)
 528:../../source/user/user.c **** {
 529:../../source/user/user.c **** 	init_MCB_binary(&kaka,0);
 530:../../source/user/user.c **** //	ka_printf("task three p()\n");
 531:../../source/user/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 532:../../source/user/user.c **** //	ka_printf("task three p()\n");
 533:../../source/user/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 534:../../source/user/user.c **** //	ka_printf("task three sleep()\n");
 535:../../source/user/user.c **** //	sleep(50);
 536:../../source/user/user.c **** 	ka_printf("task three v()\n");
 537:../../source/user/user.c **** 	v(&kaka);
 538:../../source/user/user.c **** 	ka_printf("task three v()\n");
 539:../../source/user/user.c **** 	v(&kaka);
 540:../../source/user/user.c **** }
 541:../../source/user/user.c **** 
 542:../../source/user/user.c **** void four(void *para)
 543:../../source/user/user.c **** {
 544:../../source/user/user.c **** //	ka_printf("task four p()\n");
 545:../../source/user/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 546:../../source/user/user.c **** 	ka_printf("task four p()\n");
 547:../../source/user/user.c **** 	p(&kaka,MCB_FLAG_WAIT,0);
 548:../../source/user/user.c **** 	ka_printf("task four sleep()\n");
 549:../../source/user/user.c **** 	sleep(50);
 550:../../source/user/user.c **** 	ka_printf("task four v()\n");
 551:../../source/user/user.c **** 	v(&kaka);
 552:../../source/user/user.c **** 	ka_printf("task four v()\n");
 553:../../source/user/user.c **** 	v(&kaka);
 554:../../source/user/user.c **** }
 555:../../source/user/user.c **** 
 556:../../source/user/user.c **** void five(void *para)
 557:../../source/user/user.c **** {
 558:../../source/user/user.c **** //	ka_printf("task five p()\n");
 559:../../source/user/user.c **** //	p(&kaka,MCB_FLAG_WAIT,0);
 560:../../source/user/user.c **** 	ka_printf("task five p()\n");
 561:../../source/user/user.c **** 	p(&kaka,MCB_FLAG_WAIT,0);
 562:../../source/user/user.c **** 	ka_printf("task five sleep()\n");
 563:../../source/user/user.c **** 	sleep(50);
 564:../../source/user/user.c **** 	ka_printf("task five v()\n");
 565:../../source/user/user.c **** 	v(&kaka);
 566:../../source/user/user.c **** 	ka_printf("task five v()\n");
 567:../../source/user/user.c **** 	v(&kaka);
 568:../../source/user/user.c **** }
 569:../../source/user/user.c **** 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 12


 570:../../source/user/user.c **** #endif
 571:../../source/user/user.c **** 
 572:../../source/user/user.c **** #if 1//test malloc
 573:../../source/user/user.c **** void three(void *para)
 574:../../source/user/user.c **** {
  42              		.loc 1 574 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 56
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 7, -8
  50              		.cfi_offset 14, -4
  51 0002 8EB0     		sub	sp, sp, #56
  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 64
  54 0004 00AF     		add	r7, sp, #0
  55              	.LCFI2:
  56              		.cfi_def_cfa_register 7
  57 0006 7860     		str	r0, [r7, #4]
 575:../../source/user/user.c **** 	void *ptr[10];
 576:../../source/user/user.c **** 	unsigned int i;
 577:../../source/user/user.c **** 	ka_printf("going to task three\n");
  58              		.loc 1 577 0
  59 0008 2948     		ldr	r0, .L6
  60 000a FFF7FEFF 		bl	ka_printf
 578:../../source/user/user.c **** 	for(i=0;i<10;++i)
  61              		.loc 1 578 0
  62 000e 0023     		movs	r3, #0
  63 0010 7B63     		str	r3, [r7, #52]
  64 0012 1AE0     		b	.L2
  65              	.L3:
 579:../../source/user/user.c **** 	{
 580:../../source/user/user.c **** 		ptr[i] = ka_malloc(700);
  66              		.loc 1 580 0 discriminator 3
  67 0014 4FF42F70 		mov	r0, #700
  68 0018 FFF7FEFF 		bl	ka_malloc
  69 001c 0246     		mov	r2, r0
  70 001e 7B6B     		ldr	r3, [r7, #52]
  71 0020 9B00     		lsls	r3, r3, #2
  72 0022 07F13801 		add	r1, r7, #56
  73 0026 0B44     		add	r3, r3, r1
  74 0028 43F82C2C 		str	r2, [r3, #-44]
 581:../../source/user/user.c **** 		ka_printf("i is %u,address is %p\n",i,ptr[i]);
  75              		.loc 1 581 0 discriminator 3
  76 002c 7B6B     		ldr	r3, [r7, #52]
  77 002e 9B00     		lsls	r3, r3, #2
  78 0030 07F13802 		add	r2, r7, #56
  79 0034 1344     		add	r3, r3, r2
  80 0036 53F82C3C 		ldr	r3, [r3, #-44]
  81 003a 1A46     		mov	r2, r3
  82 003c 796B     		ldr	r1, [r7, #52]
  83 003e 1D48     		ldr	r0, .L6+4
  84 0040 FFF7FEFF 		bl	ka_printf
 578:../../source/user/user.c **** 	for(i=0;i<10;++i)
  85              		.loc 1 578 0 discriminator 3
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 13


  86 0044 7B6B     		ldr	r3, [r7, #52]
  87 0046 0133     		adds	r3, r3, #1
  88 0048 7B63     		str	r3, [r7, #52]
  89              	.L2:
 578:../../source/user/user.c **** 	for(i=0;i<10;++i)
  90              		.loc 1 578 0 is_stmt 0 discriminator 1
  91 004a 7B6B     		ldr	r3, [r7, #52]
  92 004c 092B     		cmp	r3, #9
  93 004e E1D9     		bls	.L3
 582:../../source/user/user.c **** 	}
 583:../../source/user/user.c **** 	INSERT_BREAK_POINT();
  94              		.loc 1 583 0 is_stmt 1
  95 0050 194A     		ldr	r2, .L6+8
  96 0052 40F24721 		movw	r1, #583
  97 0056 1948     		ldr	r0, .L6+12
  98 0058 FFF7FEFF 		bl	insert_break_point
 584:../../source/user/user.c **** 	ka_printf("release address\n");
  99              		.loc 1 584 0
 100 005c 1848     		ldr	r0, .L6+16
 101 005e FFF7FEFF 		bl	ka_printf
 585:../../source/user/user.c **** 	for(i=0;i<10;++i)
 102              		.loc 1 585 0
 103 0062 0023     		movs	r3, #0
 104 0064 7B63     		str	r3, [r7, #52]
 105 0066 12E0     		b	.L4
 106              	.L5:
 586:../../source/user/user.c **** 	{
 587:../../source/user/user.c **** 		ka_free(ptr[i]);
 107              		.loc 1 587 0 discriminator 3
 108 0068 7B6B     		ldr	r3, [r7, #52]
 109 006a 9B00     		lsls	r3, r3, #2
 110 006c 07F13802 		add	r2, r7, #56
 111 0070 1344     		add	r3, r3, r2
 112 0072 53F82C3C 		ldr	r3, [r3, #-44]
 113 0076 1846     		mov	r0, r3
 114 0078 FFF7FEFF 		bl	ka_free
 588:../../source/user/user.c **** 		INSERT_BREAK_POINT();
 115              		.loc 1 588 0 discriminator 3
 116 007c 0E4A     		ldr	r2, .L6+8
 117 007e 4FF41371 		mov	r1, #588
 118 0082 0E48     		ldr	r0, .L6+12
 119 0084 FFF7FEFF 		bl	insert_break_point
 585:../../source/user/user.c **** 	for(i=0;i<10;++i)
 120              		.loc 1 585 0 discriminator 3
 121 0088 7B6B     		ldr	r3, [r7, #52]
 122 008a 0133     		adds	r3, r3, #1
 123 008c 7B63     		str	r3, [r7, #52]
 124              	.L4:
 585:../../source/user/user.c **** 	for(i=0;i<10;++i)
 125              		.loc 1 585 0 is_stmt 0 discriminator 1
 126 008e 7B6B     		ldr	r3, [r7, #52]
 127 0090 092B     		cmp	r3, #9
 128 0092 E9D9     		bls	.L5
 589:../../source/user/user.c **** 	}
 590:../../source/user/user.c **** 	INSERT_BREAK_POINT();
 129              		.loc 1 590 0 is_stmt 1
 130 0094 084A     		ldr	r2, .L6+8
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 14


 131 0096 40F24E21 		movw	r1, #590
 132 009a 0848     		ldr	r0, .L6+12
 133 009c FFF7FEFF 		bl	insert_break_point
 591:../../source/user/user.c **** 	ka_printf("end\n");
 134              		.loc 1 591 0
 135 00a0 0848     		ldr	r0, .L6+20
 136 00a2 FFF7FEFF 		bl	ka_printf
 592:../../source/user/user.c **** }
 137              		.loc 1 592 0
 138 00a6 00BF     		nop
 139 00a8 3837     		adds	r7, r7, #56
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 8
 142 00aa BD46     		mov	sp, r7
 143              	.LCFI4:
 144              		.cfi_def_cfa_register 13
 145              		@ sp needed
 146 00ac 80BD     		pop	{r7, pc}
 147              	.L7:
 148 00ae 00BF     		.align	2
 149              	.L6:
 150 00b0 00000000 		.word	.LC0
 151 00b4 18000000 		.word	.LC1
 152 00b8 68000000 		.word	__FUNCTION__.4843
 153 00bc 30000000 		.word	.LC2
 154 00c0 4C000000 		.word	.LC3
 155 00c4 60000000 		.word	.LC4
 156              		.cfi_endproc
 157              	.LFE24:
 158              		.size	three, .-three
 159              		.section	.rodata
 160 0065 000000   		.align	2
 161              		.type	__FUNCTION__.4843, %object
 162              		.size	__FUNCTION__.4843, 6
 163              	__FUNCTION__.4843:
 164 0068 74687265 		.ascii	"three\000"
 164      6500
 165              		.text
 166              	.Letext0:
 167              		.file 2 "../../source/include/os_cpu/kakaosstdint.h"
 168              		.file 3 "../../source/include/os_lib/double_linked_list.h"
 169              		.file 4 "../../source/include/os_core/task_state.h"
 170              		.file 5 "../../source/include/os_core/TCB.h"
 171              		.section	.debug_info,"",%progbits
 172              	.Ldebug_info0:
 173 0000 D1020000 		.4byte	0x2d1
 174 0004 0200     		.2byte	0x2
 175 0006 00000000 		.4byte	.Ldebug_abbrev0
 176 000a 04       		.byte	0x4
 177 000b 01       		.uleb128 0x1
 178 000c E5020000 		.4byte	.LASF45
 179 0010 0C       		.byte	0xc
 180 0011 A0020000 		.4byte	.LASF46
 181 0015 D8000000 		.4byte	.LASF47
 182 0019 00000000 		.4byte	.Ltext0
 183 001d C8000000 		.4byte	.Letext0
 184 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 15


 185 0025 02       		.uleb128 0x2
 186 0026 01       		.byte	0x1
 187 0027 06       		.byte	0x6
 188 0028 84010000 		.4byte	.LASF0
 189 002c 02       		.uleb128 0x2
 190 002d 02       		.byte	0x2
 191 002e 05       		.byte	0x5
 192 002f 2E000000 		.4byte	.LASF1
 193 0033 03       		.uleb128 0x3
 194 0034 04       		.byte	0x4
 195 0035 05       		.byte	0x5
 196 0036 696E7400 		.ascii	"int\000"
 197 003a 04       		.uleb128 0x4
 198 003b 33000000 		.4byte	0x33
 199 003f 02       		.uleb128 0x2
 200 0040 08       		.byte	0x8
 201 0041 05       		.byte	0x5
 202 0042 06010000 		.4byte	.LASF2
 203 0046 02       		.uleb128 0x2
 204 0047 01       		.byte	0x1
 205 0048 08       		.byte	0x8
 206 0049 5E010000 		.4byte	.LASF3
 207 004d 02       		.uleb128 0x2
 208 004e 02       		.byte	0x2
 209 004f 07       		.byte	0x7
 210 0050 D8010000 		.4byte	.LASF4
 211 0054 05       		.uleb128 0x5
 212 0055 59000000 		.4byte	.LASF6
 213 0059 02       		.byte	0x2
 214 005a 0C       		.byte	0xc
 215 005b 5F000000 		.4byte	0x5f
 216 005f 02       		.uleb128 0x2
 217 0060 04       		.byte	0x4
 218 0061 07       		.byte	0x7
 219 0062 A7010000 		.4byte	.LASF5
 220 0066 05       		.uleb128 0x5
 221 0067 BA030000 		.4byte	.LASF7
 222 006b 02       		.byte	0x2
 223 006c 0D       		.byte	0xd
 224 006d 71000000 		.4byte	0x71
 225 0071 02       		.uleb128 0x2
 226 0072 08       		.byte	0x8
 227 0073 07       		.byte	0x7
 228 0074 90010000 		.4byte	.LASF8
 229 0078 06       		.uleb128 0x6
 230 0079 24000000 		.4byte	.LASF24
 231 007d 08       		.byte	0x8
 232 007e 03       		.byte	0x3
 233 007f 04       		.byte	0x4
 234 0080 A1000000 		.4byte	0xa1
 235 0084 07       		.uleb128 0x7
 236 0085 D2030000 		.4byte	.LASF9
 237 0089 03       		.byte	0x3
 238 008a 05       		.byte	0x5
 239 008b A1000000 		.4byte	0xa1
 240 008f 02       		.byte	0x2
 241 0090 23       		.byte	0x23
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 16


 242 0091 00       		.uleb128 0
 243 0092 07       		.uleb128 0x7
 244 0093 A4030000 		.4byte	.LASF10
 245 0097 03       		.byte	0x3
 246 0098 05       		.byte	0x5
 247 0099 A1000000 		.4byte	0xa1
 248 009d 02       		.byte	0x2
 249 009e 23       		.byte	0x23
 250 009f 04       		.uleb128 0x4
 251 00a0 00       		.byte	0
 252 00a1 08       		.uleb128 0x8
 253 00a2 04       		.byte	0x4
 254 00a3 78000000 		.4byte	0x78
 255 00a7 09       		.uleb128 0x9
 256 00a8 6B000000 		.4byte	.LASF48
 257 00ac 07       		.byte	0x7
 258 00ad 01       		.byte	0x1
 259 00ae 46000000 		.4byte	0x46
 260 00b2 04       		.byte	0x4
 261 00b3 04       		.byte	0x4
 262 00b4 F5000000 		.4byte	0xf5
 263 00b8 0A       		.uleb128 0xa
 264 00b9 EB010000 		.4byte	.LASF11
 265 00bd 01       		.byte	0x1
 266 00be 0A       		.uleb128 0xa
 267 00bf 6C010000 		.4byte	.LASF12
 268 00c3 02       		.byte	0x2
 269 00c4 0A       		.uleb128 0xa
 270 00c5 0F000000 		.4byte	.LASF13
 271 00c9 03       		.byte	0x3
 272 00ca 0A       		.uleb128 0xa
 273 00cb 64020000 		.4byte	.LASF14
 274 00cf 04       		.byte	0x4
 275 00d0 0A       		.uleb128 0xa
 276 00d1 A0000000 		.4byte	.LASF15
 277 00d5 05       		.byte	0x5
 278 00d6 0A       		.uleb128 0xa
 279 00d7 38000000 		.4byte	.LASF16
 280 00db 06       		.byte	0x6
 281 00dc 0A       		.uleb128 0xa
 282 00dd B7000000 		.4byte	.LASF17
 283 00e1 07       		.byte	0x7
 284 00e2 0A       		.uleb128 0xa
 285 00e3 76000000 		.4byte	.LASF18
 286 00e7 08       		.byte	0x8
 287 00e8 0A       		.uleb128 0xa
 288 00e9 FC010000 		.4byte	.LASF19
 289 00ed 09       		.byte	0x9
 290 00ee 0A       		.uleb128 0xa
 291 00ef 8B030000 		.4byte	.LASF20
 292 00f3 0A       		.byte	0xa
 293 00f4 00       		.byte	0
 294 00f5 05       		.uleb128 0x5
 295 00f6 3B010000 		.4byte	.LASF21
 296 00fa 04       		.byte	0x4
 297 00fb 0F       		.byte	0xf
 298 00fc A7000000 		.4byte	0xa7
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 17


 299 0100 05       		.uleb128 0x5
 300 0101 60000000 		.4byte	.LASF22
 301 0105 05       		.byte	0x5
 302 0106 0A       		.byte	0xa
 303 0107 5F000000 		.4byte	0x5f
 304 010b 05       		.uleb128 0x5
 305 010c 00000000 		.4byte	.LASF23
 306 0110 05       		.byte	0x5
 307 0111 0C       		.byte	0xc
 308 0112 5F000000 		.4byte	0x5f
 309 0116 0B       		.uleb128 0xb
 310 0117 04       		.byte	0x4
 311 0118 0C       		.uleb128 0xc
 312 0119 D3020000 		.4byte	.LASF42
 313 011d 05       		.byte	0x5
 314 011e 13       		.byte	0x13
 315 011f 3A000000 		.4byte	0x3a
 316 0123 01       		.byte	0x1
 317 0124 01       		.byte	0x1
 318 0125 06       		.uleb128 0x6
 319 0126 7B020000 		.4byte	.LASF25
 320 012a 48       		.byte	0x48
 321 012b 05       		.byte	0x5
 322 012c 37       		.byte	0x37
 323 012d 04020000 		.4byte	0x204
 324 0131 07       		.uleb128 0x7
 325 0132 B4010000 		.4byte	.LASF26
 326 0136 05       		.byte	0x5
 327 0137 38       		.byte	0x38
 328 0138 04020000 		.4byte	0x204
 329 013c 02       		.byte	0x2
 330 013d 23       		.byte	0x23
 331 013e 00       		.uleb128 0
 332 013f 07       		.uleb128 0x7
 333 0140 95020000 		.4byte	.LASF27
 334 0144 05       		.byte	0x5
 335 0145 39       		.byte	0x39
 336 0146 5F000000 		.4byte	0x5f
 337 014a 02       		.byte	0x2
 338 014b 23       		.byte	0x23
 339 014c 04       		.uleb128 0x4
 340 014d 07       		.uleb128 0x7
 341 014e 96000000 		.4byte	.LASF28
 342 0152 05       		.byte	0x5
 343 0153 3A       		.byte	0x3a
 344 0154 04020000 		.4byte	0x204
 345 0158 02       		.byte	0x2
 346 0159 23       		.byte	0x23
 347 015a 08       		.uleb128 0x8
 348 015b 07       		.uleb128 0x7
 349 015c B9020000 		.4byte	.LASF29
 350 0160 05       		.byte	0x5
 351 0161 3B       		.byte	0x3b
 352 0162 0B010000 		.4byte	0x10b
 353 0166 02       		.byte	0x2
 354 0167 23       		.byte	0x23
 355 0168 0C       		.uleb128 0xc
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 18


 356 0169 07       		.uleb128 0x7
 357 016a 40020000 		.4byte	.LASF30
 358 016e 05       		.byte	0x5
 359 016f 3C       		.byte	0x3c
 360 0170 F5000000 		.4byte	0xf5
 361 0174 02       		.byte	0x2
 362 0175 23       		.byte	0x23
 363 0176 10       		.uleb128 0x10
 364 0177 07       		.uleb128 0x7
 365 0178 C1030000 		.4byte	.LASF31
 366 017c 05       		.byte	0x5
 367 017d 3D       		.byte	0x3d
 368 017e 0B010000 		.4byte	0x10b
 369 0182 02       		.byte	0x2
 370 0183 23       		.byte	0x23
 371 0184 14       		.uleb128 0x14
 372 0185 07       		.uleb128 0x7
 373 0186 2C020000 		.4byte	.LASF32
 374 018a 05       		.byte	0x5
 375 018b 3E       		.byte	0x3e
 376 018c 33000000 		.4byte	0x33
 377 0190 02       		.byte	0x2
 378 0191 23       		.byte	0x23
 379 0192 18       		.uleb128 0x18
 380 0193 07       		.uleb128 0x7
 381 0194 BA010000 		.4byte	.LASF33
 382 0198 05       		.byte	0x5
 383 0199 3F       		.byte	0x3f
 384 019a 78000000 		.4byte	0x78
 385 019e 02       		.byte	0x2
 386 019f 23       		.byte	0x23
 387 01a0 1C       		.uleb128 0x1c
 388 01a1 07       		.uleb128 0x7
 389 01a2 C6020000 		.4byte	.LASF34
 390 01a6 05       		.byte	0x5
 391 01a7 40       		.byte	0x40
 392 01a8 78000000 		.4byte	0x78
 393 01ac 02       		.byte	0x2
 394 01ad 23       		.byte	0x23
 395 01ae 24       		.uleb128 0x24
 396 01af 07       		.uleb128 0x7
 397 01b0 46010000 		.4byte	.LASF35
 398 01b4 05       		.byte	0x5
 399 01b5 41       		.byte	0x41
 400 01b6 0A020000 		.4byte	0x20a
 401 01ba 02       		.byte	0x2
 402 01bb 23       		.byte	0x23
 403 01bc 2C       		.uleb128 0x2c
 404 01bd 07       		.uleb128 0x7
 405 01be 14010000 		.4byte	.LASF36
 406 01c2 05       		.byte	0x5
 407 01c3 42       		.byte	0x42
 408 01c4 5F000000 		.4byte	0x5f
 409 01c8 02       		.byte	0x2
 410 01c9 23       		.byte	0x23
 411 01ca 30       		.uleb128 0x30
 412 01cb 07       		.uleb128 0x7
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 19


 413 01cc 4B020000 		.4byte	.LASF37
 414 01d0 05       		.byte	0x5
 415 01d1 43       		.byte	0x43
 416 01d2 5F000000 		.4byte	0x5f
 417 01d6 02       		.byte	0x2
 418 01d7 23       		.byte	0x23
 419 01d8 34       		.uleb128 0x34
 420 01d9 07       		.uleb128 0x7
 421 01da 78010000 		.4byte	.LASF38
 422 01de 05       		.byte	0x5
 423 01df 44       		.byte	0x44
 424 01e0 54000000 		.4byte	0x54
 425 01e4 02       		.byte	0x2
 426 01e5 23       		.byte	0x23
 427 01e6 38       		.uleb128 0x38
 428 01e7 07       		.uleb128 0x7
 429 01e8 4B010000 		.4byte	.LASF39
 430 01ec 05       		.byte	0x5
 431 01ed 45       		.byte	0x45
 432 01ee 22020000 		.4byte	0x222
 433 01f2 02       		.byte	0x2
 434 01f3 23       		.byte	0x23
 435 01f4 3C       		.uleb128 0x3c
 436 01f5 07       		.uleb128 0x7
 437 01f6 A9030000 		.4byte	.LASF40
 438 01fa 05       		.byte	0x5
 439 01fb 46       		.byte	0x46
 440 01fc 66000000 		.4byte	0x66
 441 0200 02       		.byte	0x2
 442 0201 23       		.byte	0x23
 443 0202 40       		.uleb128 0x40
 444 0203 00       		.byte	0
 445 0204 08       		.uleb128 0x8
 446 0205 04       		.byte	0x4
 447 0206 00010000 		.4byte	0x100
 448 020a 08       		.uleb128 0x8
 449 020b 04       		.byte	0x4
 450 020c 10020000 		.4byte	0x210
 451 0210 02       		.uleb128 0x2
 452 0211 01       		.byte	0x1
 453 0212 08       		.byte	0x8
 454 0213 F7010000 		.4byte	.LASF41
 455 0217 0D       		.uleb128 0xd
 456 0218 10020000 		.4byte	0x210
 457 021c 0E       		.uleb128 0xe
 458 021d C9010000 		.4byte	.LASF49
 459 0221 01       		.byte	0x1
 460 0222 08       		.uleb128 0x8
 461 0223 04       		.byte	0x4
 462 0224 1C020000 		.4byte	0x21c
 463 0228 0F       		.uleb128 0xf
 464 0229 54434200 		.ascii	"TCB\000"
 465 022d 05       		.byte	0x5
 466 022e 47       		.byte	0x47
 467 022f 25010000 		.4byte	0x125
 468 0233 04       		.uleb128 0x4
 469 0234 28020000 		.4byte	0x228
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 20


 470 0238 0C       		.uleb128 0xc
 471 0239 C6030000 		.4byte	.LASF43
 472 023d 01       		.byte	0x1
 473 023e 06       		.byte	0x6
 474 023f 45020000 		.4byte	0x245
 475 0243 01       		.byte	0x1
 476 0244 01       		.byte	0x1
 477 0245 08       		.uleb128 0x8
 478 0246 04       		.byte	0x4
 479 0247 33020000 		.4byte	0x233
 480 024b 0C       		.uleb128 0xc
 481 024c 1C020000 		.4byte	.LASF44
 482 0250 01       		.byte	0x1
 483 0251 07       		.byte	0x7
 484 0252 45020000 		.4byte	0x245
 485 0256 01       		.byte	0x1
 486 0257 01       		.byte	0x1
 487 0258 10       		.uleb128 0x10
 488 0259 01       		.byte	0x1
 489 025a 28010000 		.4byte	.LASF50
 490 025e 01       		.byte	0x1
 491 025f 3D02     		.2byte	0x23d
 492 0261 01       		.byte	0x1
 493 0262 00000000 		.4byte	.LFB24
 494 0266 C8000000 		.4byte	.LFE24
 495 026a 00000000 		.4byte	.LLST0
 496 026e 01       		.byte	0x1
 497 026f AF020000 		.4byte	0x2af
 498 0273 11       		.uleb128 0x11
 499 0274 5F020000 		.4byte	.LASF51
 500 0278 01       		.byte	0x1
 501 0279 3D02     		.2byte	0x23d
 502 027b 16010000 		.4byte	0x116
 503 027f 02       		.byte	0x2
 504 0280 91       		.byte	0x91
 505 0281 44       		.sleb128 -60
 506 0282 12       		.uleb128 0x12
 507 0283 70747200 		.ascii	"ptr\000"
 508 0287 01       		.byte	0x1
 509 0288 3F02     		.2byte	0x23f
 510 028a AF020000 		.4byte	0x2af
 511 028e 02       		.byte	0x2
 512 028f 91       		.byte	0x91
 513 0290 4C       		.sleb128 -52
 514 0291 12       		.uleb128 0x12
 515 0292 6900     		.ascii	"i\000"
 516 0294 01       		.byte	0x1
 517 0295 4002     		.2byte	0x240
 518 0297 5F000000 		.4byte	0x5f
 519 029b 02       		.byte	0x2
 520 029c 91       		.byte	0x91
 521 029d 74       		.sleb128 -12
 522 029e 13       		.uleb128 0x13
 523 029f 2E010000 		.4byte	.LASF52
 524 02a3 CF020000 		.4byte	0x2cf
 525 02a7 01       		.byte	0x1
 526 02a8 05       		.byte	0x5
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 21


 527 02a9 03       		.byte	0x3
 528 02aa 68000000 		.4byte	__FUNCTION__.4843
 529 02ae 00       		.byte	0
 530 02af 14       		.uleb128 0x14
 531 02b0 16010000 		.4byte	0x116
 532 02b4 BF020000 		.4byte	0x2bf
 533 02b8 15       		.uleb128 0x15
 534 02b9 5F000000 		.4byte	0x5f
 535 02bd 09       		.byte	0x9
 536 02be 00       		.byte	0
 537 02bf 14       		.uleb128 0x14
 538 02c0 17020000 		.4byte	0x217
 539 02c4 CF020000 		.4byte	0x2cf
 540 02c8 15       		.uleb128 0x15
 541 02c9 5F000000 		.4byte	0x5f
 542 02cd 05       		.byte	0x5
 543 02ce 00       		.byte	0
 544 02cf 0D       		.uleb128 0xd
 545 02d0 BF020000 		.4byte	0x2bf
 546 02d4 00       		.byte	0
 547              		.section	.debug_abbrev,"",%progbits
 548              	.Ldebug_abbrev0:
 549 0000 01       		.uleb128 0x1
 550 0001 11       		.uleb128 0x11
 551 0002 01       		.byte	0x1
 552 0003 25       		.uleb128 0x25
 553 0004 0E       		.uleb128 0xe
 554 0005 13       		.uleb128 0x13
 555 0006 0B       		.uleb128 0xb
 556 0007 03       		.uleb128 0x3
 557 0008 0E       		.uleb128 0xe
 558 0009 1B       		.uleb128 0x1b
 559 000a 0E       		.uleb128 0xe
 560 000b 11       		.uleb128 0x11
 561 000c 01       		.uleb128 0x1
 562 000d 12       		.uleb128 0x12
 563 000e 01       		.uleb128 0x1
 564 000f 10       		.uleb128 0x10
 565 0010 06       		.uleb128 0x6
 566 0011 00       		.byte	0
 567 0012 00       		.byte	0
 568 0013 02       		.uleb128 0x2
 569 0014 24       		.uleb128 0x24
 570 0015 00       		.byte	0
 571 0016 0B       		.uleb128 0xb
 572 0017 0B       		.uleb128 0xb
 573 0018 3E       		.uleb128 0x3e
 574 0019 0B       		.uleb128 0xb
 575 001a 03       		.uleb128 0x3
 576 001b 0E       		.uleb128 0xe
 577 001c 00       		.byte	0
 578 001d 00       		.byte	0
 579 001e 03       		.uleb128 0x3
 580 001f 24       		.uleb128 0x24
 581 0020 00       		.byte	0
 582 0021 0B       		.uleb128 0xb
 583 0022 0B       		.uleb128 0xb
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 22


 584 0023 3E       		.uleb128 0x3e
 585 0024 0B       		.uleb128 0xb
 586 0025 03       		.uleb128 0x3
 587 0026 08       		.uleb128 0x8
 588 0027 00       		.byte	0
 589 0028 00       		.byte	0
 590 0029 04       		.uleb128 0x4
 591 002a 35       		.uleb128 0x35
 592 002b 00       		.byte	0
 593 002c 49       		.uleb128 0x49
 594 002d 13       		.uleb128 0x13
 595 002e 00       		.byte	0
 596 002f 00       		.byte	0
 597 0030 05       		.uleb128 0x5
 598 0031 16       		.uleb128 0x16
 599 0032 00       		.byte	0
 600 0033 03       		.uleb128 0x3
 601 0034 0E       		.uleb128 0xe
 602 0035 3A       		.uleb128 0x3a
 603 0036 0B       		.uleb128 0xb
 604 0037 3B       		.uleb128 0x3b
 605 0038 0B       		.uleb128 0xb
 606 0039 49       		.uleb128 0x49
 607 003a 13       		.uleb128 0x13
 608 003b 00       		.byte	0
 609 003c 00       		.byte	0
 610 003d 06       		.uleb128 0x6
 611 003e 13       		.uleb128 0x13
 612 003f 01       		.byte	0x1
 613 0040 03       		.uleb128 0x3
 614 0041 0E       		.uleb128 0xe
 615 0042 0B       		.uleb128 0xb
 616 0043 0B       		.uleb128 0xb
 617 0044 3A       		.uleb128 0x3a
 618 0045 0B       		.uleb128 0xb
 619 0046 3B       		.uleb128 0x3b
 620 0047 0B       		.uleb128 0xb
 621 0048 01       		.uleb128 0x1
 622 0049 13       		.uleb128 0x13
 623 004a 00       		.byte	0
 624 004b 00       		.byte	0
 625 004c 07       		.uleb128 0x7
 626 004d 0D       		.uleb128 0xd
 627 004e 00       		.byte	0
 628 004f 03       		.uleb128 0x3
 629 0050 0E       		.uleb128 0xe
 630 0051 3A       		.uleb128 0x3a
 631 0052 0B       		.uleb128 0xb
 632 0053 3B       		.uleb128 0x3b
 633 0054 0B       		.uleb128 0xb
 634 0055 49       		.uleb128 0x49
 635 0056 13       		.uleb128 0x13
 636 0057 38       		.uleb128 0x38
 637 0058 0A       		.uleb128 0xa
 638 0059 00       		.byte	0
 639 005a 00       		.byte	0
 640 005b 08       		.uleb128 0x8
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 23


 641 005c 0F       		.uleb128 0xf
 642 005d 00       		.byte	0
 643 005e 0B       		.uleb128 0xb
 644 005f 0B       		.uleb128 0xb
 645 0060 49       		.uleb128 0x49
 646 0061 13       		.uleb128 0x13
 647 0062 00       		.byte	0
 648 0063 00       		.byte	0
 649 0064 09       		.uleb128 0x9
 650 0065 04       		.uleb128 0x4
 651 0066 01       		.byte	0x1
 652 0067 03       		.uleb128 0x3
 653 0068 0E       		.uleb128 0xe
 654 0069 3E       		.uleb128 0x3e
 655 006a 0B       		.uleb128 0xb
 656 006b 0B       		.uleb128 0xb
 657 006c 0B       		.uleb128 0xb
 658 006d 49       		.uleb128 0x49
 659 006e 13       		.uleb128 0x13
 660 006f 3A       		.uleb128 0x3a
 661 0070 0B       		.uleb128 0xb
 662 0071 3B       		.uleb128 0x3b
 663 0072 0B       		.uleb128 0xb
 664 0073 01       		.uleb128 0x1
 665 0074 13       		.uleb128 0x13
 666 0075 00       		.byte	0
 667 0076 00       		.byte	0
 668 0077 0A       		.uleb128 0xa
 669 0078 28       		.uleb128 0x28
 670 0079 00       		.byte	0
 671 007a 03       		.uleb128 0x3
 672 007b 0E       		.uleb128 0xe
 673 007c 1C       		.uleb128 0x1c
 674 007d 0B       		.uleb128 0xb
 675 007e 00       		.byte	0
 676 007f 00       		.byte	0
 677 0080 0B       		.uleb128 0xb
 678 0081 0F       		.uleb128 0xf
 679 0082 00       		.byte	0
 680 0083 0B       		.uleb128 0xb
 681 0084 0B       		.uleb128 0xb
 682 0085 00       		.byte	0
 683 0086 00       		.byte	0
 684 0087 0C       		.uleb128 0xc
 685 0088 34       		.uleb128 0x34
 686 0089 00       		.byte	0
 687 008a 03       		.uleb128 0x3
 688 008b 0E       		.uleb128 0xe
 689 008c 3A       		.uleb128 0x3a
 690 008d 0B       		.uleb128 0xb
 691 008e 3B       		.uleb128 0x3b
 692 008f 0B       		.uleb128 0xb
 693 0090 49       		.uleb128 0x49
 694 0091 13       		.uleb128 0x13
 695 0092 3F       		.uleb128 0x3f
 696 0093 0C       		.uleb128 0xc
 697 0094 3C       		.uleb128 0x3c
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 24


 698 0095 0C       		.uleb128 0xc
 699 0096 00       		.byte	0
 700 0097 00       		.byte	0
 701 0098 0D       		.uleb128 0xd
 702 0099 26       		.uleb128 0x26
 703 009a 00       		.byte	0
 704 009b 49       		.uleb128 0x49
 705 009c 13       		.uleb128 0x13
 706 009d 00       		.byte	0
 707 009e 00       		.byte	0
 708 009f 0E       		.uleb128 0xe
 709 00a0 13       		.uleb128 0x13
 710 00a1 00       		.byte	0
 711 00a2 03       		.uleb128 0x3
 712 00a3 0E       		.uleb128 0xe
 713 00a4 3C       		.uleb128 0x3c
 714 00a5 0C       		.uleb128 0xc
 715 00a6 00       		.byte	0
 716 00a7 00       		.byte	0
 717 00a8 0F       		.uleb128 0xf
 718 00a9 16       		.uleb128 0x16
 719 00aa 00       		.byte	0
 720 00ab 03       		.uleb128 0x3
 721 00ac 08       		.uleb128 0x8
 722 00ad 3A       		.uleb128 0x3a
 723 00ae 0B       		.uleb128 0xb
 724 00af 3B       		.uleb128 0x3b
 725 00b0 0B       		.uleb128 0xb
 726 00b1 49       		.uleb128 0x49
 727 00b2 13       		.uleb128 0x13
 728 00b3 00       		.byte	0
 729 00b4 00       		.byte	0
 730 00b5 10       		.uleb128 0x10
 731 00b6 2E       		.uleb128 0x2e
 732 00b7 01       		.byte	0x1
 733 00b8 3F       		.uleb128 0x3f
 734 00b9 0C       		.uleb128 0xc
 735 00ba 03       		.uleb128 0x3
 736 00bb 0E       		.uleb128 0xe
 737 00bc 3A       		.uleb128 0x3a
 738 00bd 0B       		.uleb128 0xb
 739 00be 3B       		.uleb128 0x3b
 740 00bf 05       		.uleb128 0x5
 741 00c0 27       		.uleb128 0x27
 742 00c1 0C       		.uleb128 0xc
 743 00c2 11       		.uleb128 0x11
 744 00c3 01       		.uleb128 0x1
 745 00c4 12       		.uleb128 0x12
 746 00c5 01       		.uleb128 0x1
 747 00c6 40       		.uleb128 0x40
 748 00c7 06       		.uleb128 0x6
 749 00c8 9642     		.uleb128 0x2116
 750 00ca 0C       		.uleb128 0xc
 751 00cb 01       		.uleb128 0x1
 752 00cc 13       		.uleb128 0x13
 753 00cd 00       		.byte	0
 754 00ce 00       		.byte	0
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 25


 755 00cf 11       		.uleb128 0x11
 756 00d0 05       		.uleb128 0x5
 757 00d1 00       		.byte	0
 758 00d2 03       		.uleb128 0x3
 759 00d3 0E       		.uleb128 0xe
 760 00d4 3A       		.uleb128 0x3a
 761 00d5 0B       		.uleb128 0xb
 762 00d6 3B       		.uleb128 0x3b
 763 00d7 05       		.uleb128 0x5
 764 00d8 49       		.uleb128 0x49
 765 00d9 13       		.uleb128 0x13
 766 00da 02       		.uleb128 0x2
 767 00db 0A       		.uleb128 0xa
 768 00dc 00       		.byte	0
 769 00dd 00       		.byte	0
 770 00de 12       		.uleb128 0x12
 771 00df 34       		.uleb128 0x34
 772 00e0 00       		.byte	0
 773 00e1 03       		.uleb128 0x3
 774 00e2 08       		.uleb128 0x8
 775 00e3 3A       		.uleb128 0x3a
 776 00e4 0B       		.uleb128 0xb
 777 00e5 3B       		.uleb128 0x3b
 778 00e6 05       		.uleb128 0x5
 779 00e7 49       		.uleb128 0x49
 780 00e8 13       		.uleb128 0x13
 781 00e9 02       		.uleb128 0x2
 782 00ea 0A       		.uleb128 0xa
 783 00eb 00       		.byte	0
 784 00ec 00       		.byte	0
 785 00ed 13       		.uleb128 0x13
 786 00ee 34       		.uleb128 0x34
 787 00ef 00       		.byte	0
 788 00f0 03       		.uleb128 0x3
 789 00f1 0E       		.uleb128 0xe
 790 00f2 49       		.uleb128 0x49
 791 00f3 13       		.uleb128 0x13
 792 00f4 34       		.uleb128 0x34
 793 00f5 0C       		.uleb128 0xc
 794 00f6 02       		.uleb128 0x2
 795 00f7 0A       		.uleb128 0xa
 796 00f8 00       		.byte	0
 797 00f9 00       		.byte	0
 798 00fa 14       		.uleb128 0x14
 799 00fb 01       		.uleb128 0x1
 800 00fc 01       		.byte	0x1
 801 00fd 49       		.uleb128 0x49
 802 00fe 13       		.uleb128 0x13
 803 00ff 01       		.uleb128 0x1
 804 0100 13       		.uleb128 0x13
 805 0101 00       		.byte	0
 806 0102 00       		.byte	0
 807 0103 15       		.uleb128 0x15
 808 0104 21       		.uleb128 0x21
 809 0105 00       		.byte	0
 810 0106 49       		.uleb128 0x49
 811 0107 13       		.uleb128 0x13
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 26


 812 0108 2F       		.uleb128 0x2f
 813 0109 0B       		.uleb128 0xb
 814 010a 00       		.byte	0
 815 010b 00       		.byte	0
 816 010c 00       		.byte	0
 817              		.section	.debug_loc,"",%progbits
 818              	.Ldebug_loc0:
 819              	.LLST0:
 820 0000 00000000 		.4byte	.LFB24-.Ltext0
 821 0004 02000000 		.4byte	.LCFI0-.Ltext0
 822 0008 0200     		.2byte	0x2
 823 000a 7D       		.byte	0x7d
 824 000b 00       		.sleb128 0
 825 000c 02000000 		.4byte	.LCFI0-.Ltext0
 826 0010 04000000 		.4byte	.LCFI1-.Ltext0
 827 0014 0200     		.2byte	0x2
 828 0016 7D       		.byte	0x7d
 829 0017 08       		.sleb128 8
 830 0018 04000000 		.4byte	.LCFI1-.Ltext0
 831 001c 06000000 		.4byte	.LCFI2-.Ltext0
 832 0020 0300     		.2byte	0x3
 833 0022 7D       		.byte	0x7d
 834 0023 C000     		.sleb128 64
 835 0025 06000000 		.4byte	.LCFI2-.Ltext0
 836 0029 AA000000 		.4byte	.LCFI3-.Ltext0
 837 002d 0300     		.2byte	0x3
 838 002f 77       		.byte	0x77
 839 0030 C000     		.sleb128 64
 840 0032 AA000000 		.4byte	.LCFI3-.Ltext0
 841 0036 AC000000 		.4byte	.LCFI4-.Ltext0
 842 003a 0200     		.2byte	0x2
 843 003c 77       		.byte	0x77
 844 003d 08       		.sleb128 8
 845 003e AC000000 		.4byte	.LCFI4-.Ltext0
 846 0042 C8000000 		.4byte	.LFE24-.Ltext0
 847 0046 0200     		.2byte	0x2
 848 0048 7D       		.byte	0x7d
 849 0049 08       		.sleb128 8
 850 004a 00000000 		.4byte	0
 851 004e 00000000 		.4byte	0
 852              		.section	.debug_aranges,"",%progbits
 853 0000 1C000000 		.4byte	0x1c
 854 0004 0200     		.2byte	0x2
 855 0006 00000000 		.4byte	.Ldebug_info0
 856 000a 04       		.byte	0x4
 857 000b 00       		.byte	0
 858 000c 0000     		.2byte	0
 859 000e 0000     		.2byte	0
 860 0010 00000000 		.4byte	.Ltext0
 861 0014 C8000000 		.4byte	.Letext0-.Ltext0
 862 0018 00000000 		.4byte	0
 863 001c 00000000 		.4byte	0
 864              		.section	.debug_line,"",%progbits
 865              	.Ldebug_line0:
 866 0000 10010000 		.section	.debug_str,"MS",%progbits,1
 866      0200C700 
 866      00000201 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 27


 866      FB0E0D00 
 866      01010101 
 867              	.LASF23:
 868 0000 5441534B 		.ascii	"TASK_PRIO_TYPE\000"
 868      5F505249 
 868      4F5F5459 
 868      504500
 869              	.LASF13:
 870 000f 53544154 		.ascii	"STATE_SUSPEND_NORMAL\000"
 870      455F5355 
 870      5350454E 
 870      445F4E4F 
 870      524D414C 
 871              	.LASF24:
 872 0024 6C697374 		.ascii	"list_head\000"
 872      5F686561 
 872      6400
 873              	.LASF1:
 874 002e 73686F72 		.ascii	"short int\000"
 874      7420696E 
 874      7400
 875              	.LASF16:
 876 0038 53544154 		.ascii	"STATE_WAIT_MESSAGE_QUEUE_FOREVER\000"
 876      455F5741 
 876      49545F4D 
 876      45535341 
 876      47455F51 
 877              	.LASF6:
 878 0059 55494E54 		.ascii	"UINT32\000"
 878      333200
 879              	.LASF22:
 880 0060 53544143 		.ascii	"STACK_TYPE\000"
 880      4B5F5459 
 880      504500
 881              	.LASF48:
 882 006b 5461736B 		.ascii	"Task_State\000"
 882      5F537461 
 882      746500
 883              	.LASF18:
 884 0076 53544154 		.ascii	"STATE_PUT_MESSAGE_QUEUE_FOREVER\000"
 884      455F5055 
 884      545F4D45 
 884      53534147 
 884      455F5155 
 885              	.LASF28:
 886 0096 73746163 		.ascii	"stack_end\000"
 886      6B5F656E 
 886      6400
 887              	.LASF15:
 888 00a0 53544154 		.ascii	"STATE_WAIT_MCB_TIMEOUT\000"
 888      455F5741 
 888      49545F4D 
 888      43425F54 
 888      494D454F 
 889              	.LASF17:
 890 00b7 53544154 		.ascii	"STATE_WAIT_MESSAGE_QUEUE_TIMEOUT\000"
 890      455F5741 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 28


 890      49545F4D 
 890      45535341 
 890      47455F51 
 891              	.LASF47:
 892 00d8 463A5C6B 		.ascii	"F:\\kaka\\KAKAOS\\C\\windows\\Project\\RVMDK\243\250"
 892      616B615C 
 892      4B414B41 
 892      4F535C43 
 892      5C77696E 
 893 0100 757635A3 		.ascii	"uv5\243\251\000"
 893      A900
 894              	.LASF2:
 895 0106 6C6F6E67 		.ascii	"long long int\000"
 895      206C6F6E 
 895      6720696E 
 895      7400
 896              	.LASF36:
 897 0114 74696D65 		.ascii	"timeslice_hope_time\000"
 897      736C6963 
 897      655F686F 
 897      70655F74 
 897      696D6500 
 898              	.LASF50:
 899 0128 74687265 		.ascii	"three\000"
 899      6500
 900              	.LASF52:
 901 012e 5F5F4655 		.ascii	"__FUNCTION__\000"
 901      4E435449 
 901      4F4E5F5F 
 901      00
 902              	.LASF21:
 903 013b 5441534B 		.ascii	"TASK_STATE\000"
 903      5F535441 
 903      544500
 904              	.LASF35:
 905 0146 6E616D65 		.ascii	"name\000"
 905      00
 906              	.LASF39:
 907 014b 64796E61 		.ascii	"dynamic_module_ptr\000"
 907      6D69635F 
 907      6D6F6475 
 907      6C655F70 
 907      747200
 908              	.LASF3:
 909 015e 756E7369 		.ascii	"unsigned char\000"
 909      676E6564 
 909      20636861 
 909      7200
 910              	.LASF12:
 911 016c 53544154 		.ascii	"STATE_DELAY\000"
 911      455F4445 
 911      4C415900 
 912              	.LASF38:
 913 0178 61747472 		.ascii	"attribution\000"
 913      69627574 
 913      696F6E00 
 914              	.LASF0:
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 29


 915 0184 7369676E 		.ascii	"signed char\000"
 915      65642063 
 915      68617200 
 916              	.LASF8:
 917 0190 6C6F6E67 		.ascii	"long long unsigned int\000"
 917      206C6F6E 
 917      6720756E 
 917      7369676E 
 917      65642069 
 918              	.LASF5:
 919 01a7 756E7369 		.ascii	"unsigned int\000"
 919      676E6564 
 919      20696E74 
 919      00
 920              	.LASF26:
 921 01b4 73746163 		.ascii	"stack\000"
 921      6B00
 922              	.LASF33:
 923 01ba 73616D65 		.ascii	"same_prio_list\000"
 923      5F707269 
 923      6F5F6C69 
 923      737400
 924              	.LASF49:
 925 01c9 64796E61 		.ascii	"dynamic_module\000"
 925      6D69635F 
 925      6D6F6475 
 925      6C6500
 926              	.LASF4:
 927 01d8 73686F72 		.ascii	"short unsigned int\000"
 927      7420756E 
 927      7369676E 
 927      65642069 
 927      6E7400
 928              	.LASF11:
 929 01eb 53544154 		.ascii	"STATE_READY\000"
 929      455F5245 
 929      41445900 
 930              	.LASF41:
 931 01f7 63686172 		.ascii	"char\000"
 931      00
 932              	.LASF19:
 933 01fc 53544154 		.ascii	"STATE_PUT_MESSAGE_QUEUE_TIMEOUT\000"
 933      455F5055 
 933      545F4D45 
 933      53534147 
 933      455F5155 
 934              	.LASF44:
 935 021c 4F535443 		.ascii	"OSTCBHighRdyPtr\000"
 935      42486967 
 935      68526479 
 935      50747200 
 936              	.LASF32:
 937 022c 64656C61 		.ascii	"delay_heap_position\000"
 937      795F6865 
 937      61705F70 
 937      6F736974 
 937      696F6E00 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 30


 938              	.LASF30:
 939 0240 7461736B 		.ascii	"task_state\000"
 939      5F737461 
 939      746500
 940              	.LASF37:
 941 024b 74696D65 		.ascii	"timeslice_rest_time\000"
 941      736C6963 
 941      655F7265 
 941      73745F74 
 941      696D6500 
 942              	.LASF51:
 943 025f 70617261 		.ascii	"para\000"
 943      00
 944              	.LASF14:
 945 0264 53544154 		.ascii	"STATE_WAIT_MCB_FOREVER\000"
 945      455F5741 
 945      49545F4D 
 945      43425F46 
 945      4F524556 
 946              	.LASF25:
 947 027b 7461736B 		.ascii	"task_control_block_struct\000"
 947      5F636F6E 
 947      74726F6C 
 947      5F626C6F 
 947      636B5F73 
 948              	.LASF27:
 949 0295 73746163 		.ascii	"stack_size\000"
 949      6B5F7369 
 949      7A6500
 950              	.LASF46:
 951 02a0 2E2E2F2E 		.ascii	"../../source/user/user.c\000"
 951      2E2F736F 
 951      75726365 
 951      2F757365 
 951      722F7573 
 952              	.LASF29:
 953 02b9 72657365 		.ascii	"reserve_prio\000"
 953      7276655F 
 953      7072696F 
 953      00
 954              	.LASF34:
 955 02c6 73757370 		.ascii	"suspend_list\000"
 955      656E645F 
 955      6C697374 
 955      00
 956              	.LASF42:
 957 02d3 675F696E 		.ascii	"g_interrupt_count\000"
 957      74657272 
 957      7570745F 
 957      636F756E 
 957      7400
 958              	.LASF45:
 959 02e5 474E5520 		.ascii	"GNU C11 7.3.1 20180622 (release) [ARM/embedded-7-br"
 959      43313120 
 959      372E332E 
 959      31203230 
 959      31383036 
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 31


 960 0318 616E6368 		.ascii	"anch revision 261907] -mcpu=cortex-m3 -mthumb -mapc"
 960      20726576 
 960      6973696F 
 960      6E203236 
 960      31393037 
 961 034b 732D6672 		.ascii	"s-frame -mthumb-interwork -mcpu=cortex-m3 -mthumb -"
 961      616D6520 
 961      2D6D7468 
 961      756D622D 
 961      696E7465 
 962 037e 67647761 		.ascii	"gdwarf-2 -O0\000"
 962      72662D32 
 962      202D4F30 
 962      00
 963              	.LASF20:
 964 038b 53544154 		.ascii	"STATE_WAIT_MUTEX_FOREVER\000"
 964      455F5741 
 964      49545F4D 
 964      55544558 
 964      5F464F52 
 965              	.LASF10:
 966 03a4 70726576 		.ascii	"prev\000"
 966      00
 967              	.LASF40:
 968 03a9 64656C61 		.ascii	"delay_reach_time\000"
 968      795F7265 
 968      6163685F 
 968      74696D65 
 968      00
 969              	.LASF7:
 970 03ba 55494E54 		.ascii	"UINT64\000"
 970      363400
 971              	.LASF31:
 972 03c1 7072696F 		.ascii	"prio\000"
 972      00
 973              	.LASF43:
 974 03c6 4F535443 		.ascii	"OSTCBCurPtr\000"
 974      42437572 
 974      50747200 
 975              	.LASF9:
 976 03d2 6E657874 		.ascii	"next\000"
 976      00
 977              		.ident	"GCC: (GNU Tools for Arm Embedded Processors 7-2018-q2-update) 7.3.1 20180622 (release) [AR
ARM GAS  G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 user.c
G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s:16     .rodata:00000000 $d
G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s:32     .text:00000000 $t
G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s:39     .text:00000000 three
G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s:150    .text:000000b0 $d
G:\Users\Jaxb\AppData\Local\Temp\ccBnNkEc.s:163    .rodata:00000068 __FUNCTION__.4843

UNDEFINED SYMBOLS
ka_printf
ka_malloc
insert_break_point
ka_free
