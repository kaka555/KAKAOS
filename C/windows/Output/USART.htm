<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\USART.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\USART.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Sun Sep 30 09:16:33 2018
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
shell &rArr; p &rArr; sys_delay &rArr; insert_into_delay_heap &rArr; heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[168]">__user_initial_stackheap</a>
 <LI><a href="#[8a]">CPU_IntDis</a>
 <LI><a href="#[1f4]">CPU_IntEn</a>
 <LI><a href="#[9e]">CPU_SR_Save</a>
 <LI><a href="#[9f]">CPU_SR_Restore</a>
 <LI><a href="#[1f5]">CPU_WaitForInt</a>
 <LI><a href="#[1f6]">CPU_WaitForExcept</a>
 <LI><a href="#[1f7]">CPU_CntLeadZeros</a>
 <LI><a href="#[1f8]">CPU_CntTrailZeros</a>
 <LI><a href="#[1f9]">CPU_RevBits</a>
 <LI><a href="#[88]">OSStartHighRdy</a>
 <LI><a href="#[161]">ReBoot</a>
 <LI><a href="#[25]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[85]">ka_printf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">_ASSERT</a><BR>
 <LI><a href="#[a7]">ka_malloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a7]">ka_malloc</a><BR>
 <LI><a href="#[f8]">_alloc_page</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">_alloc_page</a><BR>
 <LI><a href="#[39]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[39]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">FSMC_SRAM_Init</a> from sram.o(.text) referenced 2 times from bsp.o(.DEVICE.TEXT)
 <LI><a href="#[1f]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">OS_CPU_SysTickHandler</a> from os_tick.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[29]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">USART_Config</a> from bsp_usart.o(.text) referenced 2 times from bsp.o(.DEVICE.TEXT)
 <LI><a href="#[51]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[6c]">_cmp</a> from os_delay.o(.text) referenced from os_delay.o(.text)
 <LI><a href="#[16]">addr_creat_para</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[63]">count_init</a> from osinit.o(.text) referenced from osinit.o(.INIT.TEXT)
 <LI><a href="#[6a]">delete_myself</a> from tcb.o(.text) referenced from tcb.o(.text)
 <LI><a href="#[14]">echo_creat_para</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[9]">f1</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[69]">four</a> from user.o(.text) referenced from osinit.o(.text)
 <LI><a href="#[64]">idle</a> from osinit.o(.text) referenced from osinit.o(.INIT.TEXT)
 <LI><a href="#[6b]">index_change_record</a> from os_delay.o(.text) referenced from os_delay.o(.text)
 <LI><a href="#[6]">redo</a> from shell.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[c]">set_creat_para</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[67]">shell</a> from shell.o(.text) referenced from osinit.o(.text)
 <LI><a href="#[15]">shell_addr</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[18]">shell_buddy_debug</a> from buddy.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[e]">shell_check_kmem</a> from malloc.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[1a]">shell_check_os_ready</a> from os_ready.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[f]">shell_check_slab</a> from malloc.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[17]">shell_clear</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[1c]">shell_debug_info</a> from shell_debug.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[11]">shell_debug_next</a> from shell_debug.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[a]">shell_debug_run</a> from shell_debug.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[12]">shell_debug_stop</a> from shell_debug.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[13]">shell_echo</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[10]">shell_get_sram_space</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[8]">shell_memory</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[19]">shell_reboot</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[b]">shell_set</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[d]">shell_time</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[1b]">shell_version</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[7]">test</a> from shell_fun.o(.text) referenced 2 times from shell.o(.data)
 <LI><a href="#[68]">three</a> from user.o(.text) referenced from osinit.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[70]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[17c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[17d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[17e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[17f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[180]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[74]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[181]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[182]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[183]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[184]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[185]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[186]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[187]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[188]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[189]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[190]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[191]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[192]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[193]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[194]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[195]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[196]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[197]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[198]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[199]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[19a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[6f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[19b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[71]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[73]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[19c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[75]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; os_start &rArr; task_init_ready &rArr; task_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[169]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[78]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[19e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[83]"></a>os_start</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, osinit.o(.INIT.TEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = os_start &rArr; task_init_ready &rArr; task_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init_ready
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_prio_ready_TCB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_systick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main &rArr; os_start &rArr; task_init_ready &rArr; task_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[68]"></a>three</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = three &rArr; sys_delay &rArr; insert_into_delay_heap &rArr; heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osinit.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>four</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = four &rArr; sys_suspend &rArr; task_change &rArr; get_highest_prio_ready_TCB &rArr; get_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osinit.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>five</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[dd]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[1a0]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[1a6]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[1ab]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>FSMC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[93]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[df]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_GPIO_Config
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1b4]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[94]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1c5]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e7]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[de]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_GPIO_Config
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[97]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1d6]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[98]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1dc]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[e0]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1df]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_putchar
</UL>

<P><STRONG><a name="[eb]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendArray
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_putchar
</UL>

<P><STRONG><a name="[1ef]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f0]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>task_start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, osinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = task_start &rArr; task_creat_ready &rArr; task_creat &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_init
</UL>

<P><STRONG><a name="[a0]"></a>task_delete</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = task_delete &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_suspend_list
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_TCB_num
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_myself
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[a6]"></a>task_creat</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = task_creat &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_in_TCB_list
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat_ready
</UL>

<P><STRONG><a name="[ac]"></a>task_init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = task_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_register
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_in_TCB_list
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init_ready
</UL>

<P><STRONG><a name="[ad]"></a>task_change_prio</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_in_TCB_list
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_TCB_list
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>

<P><STRONG><a name="[80]"></a>__init_delay_heap</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = __init_delay_heap &rArr; heap_init &rArr; Vector_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[b2]"></a>insert_into_delay_heap</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = insert_into_delay_heap &rArr; heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_push
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
</UL>

<P><STRONG><a name="[a4]"></a>remove_from_delay_heap</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_remove_index_data
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_cur_len
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[b7]"></a>delay_heap_get_top_TCB</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = delay_heap_get_top_TCB &rArr; heap_get_index_data_safe &rArr; Vector_get_index_data &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_task_check
</UL>

<P><STRONG><a name="[b9]"></a>delay_heap_remove_top_TCB</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = delay_heap_remove_top_TCB &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_remove_index_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_task_check
</UL>

<P><STRONG><a name="[ba]"></a>shell_delay_heap_check</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, os_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_cur_len
</UL>

<P><STRONG><a name="[bb]"></a>get_delay_heap_cur_len</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, os_delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_cur_len
</UL>

<P><STRONG><a name="[7f]"></a>__init_ready_group</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_ready.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[af]"></a>insert_ready_TCB</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_ready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = insert_ready_TCB &rArr; increase_ready_num &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_ready_num
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_task_check
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_suspend_list
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_prio
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init_ready
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat_ready
</UL>

<P><STRONG><a name="[a5]"></a>delete_TCB_from_ready</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, os_ready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = delete_TCB_from_ready &rArr; get_ready_num_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_num_from_TCB_list
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_from_TCB_list
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_ready_num
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_prio
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[86]"></a>get_highest_prio_ready_TCB</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_ready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = get_highest_prio_ready_TCB &rArr; get_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_from_TCB_list
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
</UL>

<P><STRONG><a name="[1a]"></a>shell_check_os_ready</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, os_ready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = shell_check_os_ready &rArr; get_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_from_TCB_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>task_change</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_schedule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = task_change &rArr; get_highest_prio_ready_TCB &rArr; get_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_prio_ready_TCB
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init_ready
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat_ready
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_init
</UL>

<P><STRONG><a name="[c1]"></a>delay_ms</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_schedule.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[8b]"></a>sys_delay</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_schedule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = sys_delay &rArr; insert_into_delay_heap &rArr; heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_delay_heap
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_init
</UL>

<P><STRONG><a name="[8c]"></a>sys_suspend</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os_schedule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sys_suspend &rArr; task_change &rArr; get_highest_prio_ready_TCB &rArr; get_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_suspend_list
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;five
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;four
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
</UL>

<P><STRONG><a name="[9b]"></a>task_creat_ready</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, os_schedule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = task_creat_ready &rArr; task_creat &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[84]"></a>task_init_ready</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, os_schedule.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = task_init_ready &rArr; task_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[1f1]"></a>sys_schedule_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_schedule.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>sys_schedule_unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_schedule.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>sys_schedule_islock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[82]"></a>__init_suspend_list</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_suspend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[c2]"></a>insert_into_suspend_list</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_suspend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = insert_into_suspend_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
</UL>

<P><STRONG><a name="[a3]"></a>remove_from_suspend_list</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_suspend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = remove_from_suspend_list &rArr; insert_ready_TCB &rArr; increase_ready_num &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[81]"></a>__init_TCB_list</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_tcb_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[ab]"></a>register_in_TCB_list</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_tcb_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = register_in_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_prio
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
</UL>

<P><STRONG><a name="[ae]"></a>delete_from_TCB_list</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, os_tcb_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_prio
</UL>

<P><STRONG><a name="[be]"></a>get_from_TCB_list</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_tcb_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_os_ready
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_prio_ready_TCB
</UL>

<P><STRONG><a name="[c0]"></a>get_ready_num_from_TCB_list</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_tcb_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_ready_num_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
</UL>

<P><STRONG><a name="[bf]"></a>decrease_ready_num</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_tcb_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = decrease_ready_num &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
</UL>

<P><STRONG><a name="[bd]"></a>increase_ready_num</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_tcb_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = increase_ready_num &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
</UL>

<P><STRONG><a name="[a1]"></a>decrease_TCB_num</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_tcb_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = decrease_TCB_num &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[c4]"></a>increase_TCB_num</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_tcb_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>

<P><STRONG><a name="[26]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; delay_task_check &rArr; delay_heap_remove_top_TCB &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_time_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_task_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_schedule_islock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>init_MCB</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = init_MCB &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_debug_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[d1]"></a>p</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, mcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = p &rArr; sys_delay &rArr; insert_into_delay_heap &rArr; heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_DELETE
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_INSERT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_break_point
</UL>

<P><STRONG><a name="[d3]"></a>v</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = v &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_first_in_chain
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_suspend_list
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_debug_run
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_debug_next
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_shell_buffer
</UL>

<P><STRONG><a name="[d5]"></a>clear_MCB_index</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mcb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[d2]"></a>get_time</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
</UL>

<P><STRONG><a name="[d6]"></a>set_time</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[1f3]"></a>init_system_time</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, time.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>system_time_increase</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_time_handler
</UL>

<P><STRONG><a name="[d7]"></a>system_time_display</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = system_time_display &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_time
</UL>

<P><STRONG><a name="[8a]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_display
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_MCB_index
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init_ready
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat_ready
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_slab
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_kmem
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power10_page
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power9_page
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power8_page
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power7_page
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power6_page
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power5_page
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power4_page
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power3_page
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power2_page
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power1_page
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power10_page
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power9_page
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power8_page
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power7_page
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power6_page
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power5_page
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power4_page
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power3_page
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power2_page
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power1_page
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_buddy_space
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[9f]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_display
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_MCB_index
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init_ready
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat_ready
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_slab
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_kmem
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power10_page
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power9_page
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power8_page
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power7_page
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power6_page
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power5_page
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power4_page
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power3_page
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power2_page
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power1_page
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power10_page
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power9_page
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power8_page
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power7_page
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power6_page
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power5_page
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power4_page
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power3_page
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power2_page
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power1_page
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_buddy_space
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[1f5]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>set_register</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, os_cpu_stm32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_register
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
</UL>

<P><STRONG><a name="[87]"></a>__init_systick</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_cpu_stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[d8]"></a>ka_putchar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ka_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_puts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_putstr
</UL>

<P><STRONG><a name="[7d]"></a>bsp_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bsp_init &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[4]"></a>USART_Config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.DEVICE.TEXT)
</UL>
<P><STRONG><a name="[e2]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendArray
</UL>

<P><STRONG><a name="[e3]"></a>Usart_SendArray</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[e4]"></a>Usart_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[e5]"></a>Usart_SendHalfWord</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[5]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FSMC_SRAM_Init &rArr; SRAM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_GPIO_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.DEVICE.TEXT)
</UL>
<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1fa]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>hard_fault_handler_c</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hard_fault_handler_c &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>USART1_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; put_in_shell_buffer &rArr; v &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_shell_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>get_current_buddy_space</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = get_current_buddy_space
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_sram_space
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_buddy_debug
</UL>

<P><STRONG><a name="[f7]"></a>init_buddy</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = init_buddy &rArr; _add_to_order_array &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_malloc
</UL>

<P><STRONG><a name="[f9]"></a>alloc_power1_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = alloc_power1_page &rArr; _alloc_page &rArr;  _alloc_page (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
</UL>

<P><STRONG><a name="[fb]"></a>alloc_power2_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = alloc_power2_page &rArr; _alloc_page &rArr;  _alloc_page (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
</UL>

<P><STRONG><a name="[fc]"></a>alloc_power3_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = alloc_power3_page &rArr; _alloc_page &rArr;  _alloc_page (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
</UL>

<P><STRONG><a name="[fd]"></a>alloc_power4_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = alloc_power4_page &rArr; _alloc_page &rArr;  _alloc_page (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
</UL>

<P><STRONG><a name="[fe]"></a>alloc_power5_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[ff]"></a>alloc_power6_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[100]"></a>alloc_power7_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[101]"></a>alloc_power8_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[102]"></a>alloc_power9_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[103]"></a>alloc_power10_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_of_num
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[105]"></a>return_power1_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[106]"></a>return_power2_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[107]"></a>return_power3_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[108]"></a>return_power4_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[109]"></a>return_power5_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[10a]"></a>return_power6_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[10b]"></a>return_power7_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[10c]"></a>return_power8_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[10d]"></a>return_power9_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[10e]"></a>return_power10_page</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[18]"></a>shell_buddy_debug</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = shell_buddy_debug &rArr; check_buddy &rArr; _check_buddy_level_flag &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_buddy_space
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_buddy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>heap_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = heap_init &rArr; Vector_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_delay_heap
</UL>

<P><STRONG><a name="[114]"></a>heap_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, heap_oo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_delete
</UL>

<P><STRONG><a name="[b4]"></a>heap_get_cur_len</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = heap_get_cur_len &rArr; get_Vector_cur_len &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_delay_heap_cur_len
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delay_heap_check
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
</UL>

<P><STRONG><a name="[b3]"></a>heap_push</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_cur_len
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_push_back
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_delay_heap
</UL>

<P><STRONG><a name="[b5]"></a>heap_get_index_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = heap_get_index_data &rArr; Vector_get_index_data &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delay_heap_check
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
</UL>

<P><STRONG><a name="[b8]"></a>heap_get_index_data_safe</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = heap_get_index_data_safe &rArr; Vector_get_index_data &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_heap_get_top_TCB
</UL>

<P><STRONG><a name="[11a]"></a>heap_set_index_data</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, heap_oo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_set_index_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_adjust
</UL>

<P><STRONG><a name="[b6]"></a>heap_remove_index_data</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_remove_index_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_heap_remove_top_TCB
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
</UL>

<P><STRONG><a name="[11d]"></a>heap_erase_data</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, heap_oo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_erase_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_adjust
</UL>

<P><STRONG><a name="[13c]"></a>IL_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, insert_sort.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_cache_chain
</UL>

<P><STRONG><a name="[11f]"></a>get_next_IL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, insert_sort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_next_IL &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
</UL>

<P><STRONG><a name="[ce]"></a>insert_chain</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, insert_sort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = insert_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_INSERT
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_cache_chain
</UL>

<P><STRONG><a name="[1fd]"></a>find_in_chain</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, insert_sort.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>delete_from_chain</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, insert_sort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delete_from_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_DELETE
</UL>

<P><STRONG><a name="[d4]"></a>delete_first_in_chain</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, insert_sort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_first_in_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
</UL>

<P><STRONG><a name="[126]"></a>find_first_bigger_IL</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, insert_sort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = find_first_bigger_IL
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
</UL>

<P><STRONG><a name="[123]"></a>init_malloc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = init_malloc &rArr; insert_into_cache_chain &rArr; insert_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_cache_chain
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buddy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_my_micro_lib
</UL>

<P><STRONG><a name="[a7]"></a>ka_malloc</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slab
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_cache_chain
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_bit_place
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_first_bigger_IL
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_IL
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_INSERT
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_insert_variable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_swap_inner
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_room
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_init
</UL>

<P><STRONG><a name="[a2]"></a>ka_free</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ka_free &rArr; free_find_in_slab_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_find_in_slab_chain
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_DELETE
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_room
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_delete
</UL>

<P><STRONG><a name="[e]"></a>shell_check_kmem</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = shell_check_kmem &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>shell_check_slab</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = shell_check_slab &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>ka_pow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ka_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[12e]"></a>ka_puts</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ka_puts &rArr; ka_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[136]"></a>ka_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mymicrolib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_set
</UL>

<P><STRONG><a name="[141]"></a>ka_memcpy</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_swap_inner
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_pop_back
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_room
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_set_inner
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_set_index_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_remove_index_data
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_push_back
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_erase_data
</UL>

<P><STRONG><a name="[85]"></a>ka_printf</STRONG> (Thumb, 1228 bytes, Stack size 96 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_strlen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_puts
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_putstr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;five
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;four
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;three
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_display
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_os_ready
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_delay_heap_check
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_delay_heap
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display_addr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_break_point
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_version
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_set
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_sram_space
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_debug_info
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_clear
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_addr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_and_execute_command
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_slab
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_kmem
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_buddy_debug
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_buddy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_buddy_level_flag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_shell_buffer
</UL>

<P><STRONG><a name="[148]"></a>ka_strncmp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ka_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_and_execute_command
</UL>

<P><STRONG><a name="[a8]"></a>ka_memset</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ka_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_buffer
</UL>

<P><STRONG><a name="[1fe]"></a>ka_strcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mymicrolib.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>ka_atoi</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ka_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_write
</UL>

<P><STRONG><a name="[137]"></a>ka_atof</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ka_atof &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_write
</UL>

<P><STRONG><a name="[1ff]"></a>ka_strcmp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mymicrolib.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__init_my_micro_lib</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __init_my_micro_lib &rArr; init_malloc &rArr; insert_into_cache_chain &rArr; insert_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[124]"></a>insert_into_cache_chain</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = insert_into_cache_chain &rArr; insert_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_chain
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_malloc
</UL>

<P><STRONG><a name="[12b]"></a>load_slab</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = load_slab &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
</UL>

<P><STRONG><a name="[113]"></a>Vector_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Vector_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
</UL>

<P><STRONG><a name="[13f]"></a>get_Vector_size</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vector.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>

<P><STRONG><a name="[118]"></a>get_Vector_cur_len</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_Vector_cur_len &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_remove_index_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_push
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data_safe
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_cur_len
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_erase_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_set_index_data
</UL>

<P><STRONG><a name="[119]"></a>Vector_push_back</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_room
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_push
</UL>

<P><STRONG><a name="[142]"></a>Vector_pop_back</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vector.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>

<P><STRONG><a name="[bc]"></a>Vector_get_index_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Vector_get_index_data &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data_safe
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_change_record
</UL>

<P><STRONG><a name="[11b]"></a>Vector_set_index_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vector.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_set_index_data
</UL>

<P><STRONG><a name="[b0]"></a>Vector_get_index_address</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Vector_get_index_address &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmp
</UL>

<P><STRONG><a name="[115]"></a>Vector_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vector.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_delete
</UL>

<P><STRONG><a name="[11e]"></a>Vector_erase_data</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, vector.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_erase_data
</UL>

<P><STRONG><a name="[11c]"></a>Vector_remove_index_data</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Vector_remove_index_data &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_remove_index_data
</UL>

<P><STRONG><a name="[117]"></a>Vector_set_inner</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_adjust
</UL>

<P><STRONG><a name="[143]"></a>Vector_swap_inner</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, vector.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>

<P><STRONG><a name="[144]"></a>my_abort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myassert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = my_abort &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>

<P><STRONG><a name="[89]"></a>_ASSERT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, myassert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_suspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_chain
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_MCB_index
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MCB
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_DELETE
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRY_MCB_WAIT_INSERT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_TCB_num
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_suspend_list
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_ready_num
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_num_from_TCB_list
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_from_TCB_list
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_ready_num
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_remove_index_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_push
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data_safe
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_index_data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_get_cur_len
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_data
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_address
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_delay_heap
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_suspend_list
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_from_delay_heap
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_in_TCB_list
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_TCB_list
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_TCB_from_ready
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrease_TCB_num
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_prio
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_prio_ready_TCB
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display_addr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_insert_variable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_break_point
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_debug_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_and_execute_command
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_list_hash
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_swap_inner
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_pop_back
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_size
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_room
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slab
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_find_in_slab_chain
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_case_alloc_buddy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_IL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vector_cur_len
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_set_inner
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_set_index_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_remove_index_data
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_push_back
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_erase_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_delete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_erase_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_set_index_data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_delete
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_flag
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_level
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_buddy_flag_level
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delete_from_chain
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_link_body
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deal_with_flag_alloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buddy_page_num
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array
</UL>

<P><STRONG><a name="[153]"></a>get_command_processer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, command_processor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process
</UL>

<P><STRONG><a name="[147]"></a>match_and_execute_command</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = match_and_execute_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_list_hash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process
</UL>

<P><STRONG><a name="[14a]"></a>insert_struct_command_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_1 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[14b]"></a>insert_struct_command_2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_2 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[14c]"></a>insert_struct_command_3</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_3 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[14d]"></a>insert_struct_command_7</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_7 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[14e]"></a>insert_struct_command_4</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_4 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[14f]"></a>insert_struct_command_5</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_5 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[150]"></a>insert_struct_command_6</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = insert_struct_command_6 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
</UL>

<P><STRONG><a name="[151]"></a>clean_buffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memset
</UL>

<P><STRONG><a name="[ec]"></a>put_in_shell_buffer</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = put_in_shell_buffer &rArr; v &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>shell</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = shell &rArr; p &rArr; sys_delay &rArr; insert_into_delay_heap &rArr; heap_push &rArr; Vector_push_back &rArr; expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osinit.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>shell_debug_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MCB
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_shell_variable_array
</UL>

<P><STRONG><a name="[157]"></a>insert_break_point</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, shell_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>

<P><STRONG><a name="[11]"></a>shell_debug_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = shell_debug_next &rArr; v &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>shell_debug_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = shell_debug_run &rArr; v &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>shell_debug_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shell_debug.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>shell_debug_info</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = shell_debug_info &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>shell_v_hash</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, shell_debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_insert_variable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
</UL>

<P><STRONG><a name="[158]"></a>find_in_variable_array</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = find_in_variable_array &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_hash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_strncmp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_set
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_addr
</UL>

<P><STRONG><a name="[15a]"></a>shell_insert_variable</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, shell_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_hash
</UL>

<P><STRONG><a name="[15b]"></a>shell_v_display</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = shell_v_display &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo
</UL>

<P><STRONG><a name="[15d]"></a>shell_v_display_addr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = shell_v_display_addr &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_addr
</UL>

<P><STRONG><a name="[15e]"></a>shell_v_write</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, shell_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = shell_v_write &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_set
</UL>

<P><STRONG><a name="[7]"></a>test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = test &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>f1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f1 &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>shell_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = shell_version &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>shell_time</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = shell_time &rArr; system_time_display &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>shell_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell_fun.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>shell_get_sram_space</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = shell_get_sram_space &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_buddy_space
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>shell_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = shell_clear &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>echo_creat_para</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell_fun.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>shell_echo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = shell_echo &rArr; find_in_variable_array &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>shell_set</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = shell_set &rArr; shell_v_write &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>set_creat_para</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell_fun.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>addr_creat_para</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell_fun.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>shell_addr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = shell_addr &rArr; find_in_variable_array &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display_addr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_in_variable_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>shell_reboot</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = shell_reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReBoot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[200]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_in_TCB_list
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_TCB_list
</UL>

<P><STRONG><a name="[201]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[162]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[145]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abort
</UL>

<P><STRONG><a name="[202]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[163]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[205]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[164]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[72]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[77]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[166]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[16a]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[208]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[209]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[161]"></a>ReBoot</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_reboot
</UL>

<P><STRONG><a name="[25]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_write
</UL>

<P><STRONG><a name="[16b]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
</UL>

<P><STRONG><a name="[16e]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[174]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
</UL>

<P><STRONG><a name="[171]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[172]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_shell_buffer
</UL>

<P><STRONG><a name="[20a]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
</UL>

<P><STRONG><a name="[20b]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_shell_buffer
</UL>

<P><STRONG><a name="[173]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[20c]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
</UL>

<P><STRONG><a name="[175]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[170]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[176]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_atof
</UL>

<P><STRONG><a name="[178]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_v_display
</UL>

<P><STRONG><a name="[179]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_time_handler
</UL>

<P><STRONG><a name="[17b]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_time_handler
</UL>

<P><STRONG><a name="[20d]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[20e]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[20f]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[17a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[16c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[8e]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HardFault_Handler &rArr; hard_fault_handler_c &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>os_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, osinit.o(.INIT.TEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = os_init &rArr; __init_delay_heap &rArr; heap_init &rArr; Vector_init &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_suspend_list
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_ready_group
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_my_micro_lib
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_delay_heap
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init_TCB_list
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_start
</UL>

<P><STRONG><a name="[63]"></a>count_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, osinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = count_init &rArr; task_start &rArr; task_creat_ready &rArr; task_creat &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osinit.o(.INIT.TEXT)
</UL>
<P><STRONG><a name="[64]"></a>idle</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, osinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osinit.o(.INIT.TEXT)
</UL>
<P><STRONG><a name="[aa]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_creat
</UL>

<P><STRONG><a name="[6a]"></a>delete_myself</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = delete_myself &rArr; task_delete &rArr; remove_from_delay_heap &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcb.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>_cmp</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _cmp &rArr; Vector_get_index_address &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_delay.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>index_change_record</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = index_change_record &rArr; Vector_get_index_data &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_get_index_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_delay.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>delay_task_check</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = delay_task_check &rArr; delay_heap_remove_top_TCB &rArr; heap_remove_index_data &rArr; heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_heap_remove_top_TCB
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_heap_get_top_TCB
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_ready_TCB
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[c6]"></a>run_task_handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = run_task_handler &rArr; get_ready_num_from_TCB_list &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_num_from_TCB_list
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_from_TCB_list
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[c7]"></a>tick_time_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tick_time_handler &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_increase
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[cd]"></a>TRY_MCB_WAIT_INSERT</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = TRY_MCB_WAIT_INSERT &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_chain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
</UL>

<P><STRONG><a name="[cf]"></a>TRY_MCB_WAIT_DELETE</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mcb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TRY_MCB_WAIT_DELETE &rArr; ka_free &rArr; free_find_in_slab_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_chain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p
</UL>

<P><STRONG><a name="[db]"></a>NVIC_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[e6]"></a>SRAM_GPIO_Config</STRONG> (Thumb, 628 bytes, Stack size 8 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SRAM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[ef]"></a>_alloc_order_link</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, buddy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array
</UL>

<P><STRONG><a name="[ee]"></a>_add_to_order_array</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _add_to_order_array &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_order_link
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buddy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
</UL>

<P><STRONG><a name="[f0]"></a>_buddy_page_num</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
</UL>

<P><STRONG><a name="[f6]"></a>assert_in_chain</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
</UL>

<P><STRONG><a name="[f1]"></a>_deal_with_flag_alloc</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _deal_with_flag_alloc &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
</UL>

<P><STRONG><a name="[f2]"></a>_return_link_body</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _return_link_body &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delete_from_chain
</UL>

<P><STRONG><a name="[f3]"></a>_delete_from_chain</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_link_body
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
</UL>

<P><STRONG><a name="[f4]"></a>_add_to_order_array_loop</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_flag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delete_from_chain
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deal_with_flag_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_in_chain
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_buddy_page_num
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_page
</UL>

<P><STRONG><a name="[f8]"></a>_alloc_page</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _alloc_page &rArr;  _alloc_page (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_return_link_body
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deal_with_flag_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power10_page
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power9_page
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power8_page
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power7_page
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power6_page
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power5_page
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power4_page
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power3_page
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power2_page
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power1_page
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_page
</UL>

<P><STRONG><a name="[104]"></a>_return_page</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deal_with_flag_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power10_page
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power9_page
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power8_page
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power7_page
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power6_page
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power5_page
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power4_page
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power3_page
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power2_page
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_power1_page
</UL>

<P><STRONG><a name="[10f]"></a>_check_buddy_flag_level</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _check_buddy_flag_level &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_buddy
</UL>

<P><STRONG><a name="[110]"></a>_get_level</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _get_level &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_buddy
</UL>

<P><STRONG><a name="[111]"></a>_check_buddy_level_flag</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _check_buddy_level_flag &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_buddy
</UL>

<P><STRONG><a name="[112]"></a>check_buddy</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, buddy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = check_buddy &rArr; _check_buddy_level_flag &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_buddy_level_flag
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_level
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_buddy_flag_level
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_buddy_debug
</UL>

<P><STRONG><a name="[f5]"></a>_check_flag</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, buddy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_to_order_array_loop
</UL>

<P><STRONG><a name="[fa]"></a>_add_of_num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, buddy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power10_page
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power9_page
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power8_page
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power7_page
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power6_page
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power5_page
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power4_page
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power3_page
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power2_page
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power1_page
</UL>

<P><STRONG><a name="[116]"></a>heap_adjust</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, heap_oo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = heap_adjust &rArr; Vector_set_inner &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_set_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_remove_index_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_push
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_erase_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_set_index_data
</UL>

<P><STRONG><a name="[120]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, insert_sort.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_chain
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>

<P><STRONG><a name="[121]"></a>list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, insert_sort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_chain
</UL>

<P><STRONG><a name="[122]"></a>list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, insert_sort.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_from_chain
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_first_in_chain
</UL>

<P><STRONG><a name="[129]"></a>list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_find_in_slab_chain
</UL>

<P><STRONG><a name="[12a]"></a>get_set_bit_place</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
</UL>

<P><STRONG><a name="[125]"></a>_case_alloc_buddy</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _case_alloc_buddy &rArr; alloc_power4_page &rArr; _alloc_page &rArr;  _alloc_page (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power4_page
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power3_page
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power2_page
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_power1_page
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
</UL>

<P><STRONG><a name="[12c]"></a>free_find_in_slab_chain</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = free_find_in_slab_chain &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
</UL>

<P><STRONG><a name="[128]"></a>list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
</UL>

<P><STRONG><a name="[127]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, malloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_slab
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_check_kmem
</UL>

<P><STRONG><a name="[12d]"></a>m_putstr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mymicrolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_putstr &rArr; ka_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
</UL>

<P><STRONG><a name="[13e]"></a>list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, slab.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slab
</UL>

<P><STRONG><a name="[13d]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slab.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_slab
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_into_cache_chain
</UL>

<P><STRONG><a name="[140]"></a>expand_room</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = expand_room &rArr; ka_malloc &rArr;  ka_malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_push_back
</UL>

<P><STRONG><a name="[146]"></a>command_list_hash</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_and_execute_command
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command
</UL>

<P><STRONG><a name="[149]"></a>insert_struct_command</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, command_processor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_list_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_6
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_5
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_7
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_3
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_1
</UL>

<P><STRONG><a name="[152]"></a>process</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = process &rArr; match_and_execute_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_and_execute_command
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_command_processer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redo
</UL>

<P><STRONG><a name="[6]"></a>redo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = redo &rArr; process &rArr; match_and_execute_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ka_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.data)
</UL>
<P><STRONG><a name="[154]"></a>shell_init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = shell_init &rArr; insert_struct_command_6 &rArr; insert_struct_command &rArr; command_list_hash &rArr; _ASSERT &rArr; ka_printf &rArr;  _ASSERT (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MCB
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ASSERT
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_6
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_5
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_7
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_3
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_struct_command_1
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[156]"></a>__init_shell_variable_array</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, shell_debug.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_debug_init
</UL>

<P><STRONG><a name="[177]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[16f]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
